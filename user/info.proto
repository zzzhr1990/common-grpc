syntax = "proto3";

package services;

//import "service_one/messages.proto";
option go_package = "github.com/zzzhr1990/common-grpc/go/services/user/info";
// import "common/common_entity.proto";


service UserService {
    // 强行创建用户（仅后台使用）
    rpc Create (User) returns (User) {}
    // 短信创建用户，password、email、name 选填项目，如果不填写，系统会随机生成
    rpc SmsCreate (SmsCreateRequest) returns (User) {}
    // 废弃掉，请调用 FindOne方法
    // rpc CheckUserExists (SmsCreateRequest) returns (User) {}

    // 获取用户信息，仅需要传递 identity，如果没有 返回空用户实体（identity = 0）
    rpc Get (User) returns (User) {}
    // 查找用户/判断用户存在，仅需要传递 identity，或者是phone+country_code，如果没有 返回空用户实体（identity = 0）
    rpc FindOne (User) returns (User) {}
    // 校验密码并登录， 支持 phone+country_code+password/ name+country_code+password，如果没有 返回空用户实体（identity = 0）
    rpc Login (User) returns (User) {}
    // SMS login, send session and code, return empty user info instead of error if not success
    rpc SmsLogin (SmsValidateRequest) returns (User) {} 
    // 强行登录用户（仅后台使用）
    rpc LoginDirect (User) returns (User) {}
    // 登出（记录用户登录操作）
    rpc Logoff (User) returns (User) {}
    // 更新用户信息，identity是必填项目，其他选填， 但是不能更改密码
    rpc Update (User) returns (User) {}

    // rpc getBalance (Balance) returns (Balance) {}
    // rpc setSpaceUsed (Balance) returns (Balance) {}
    // 发送短信
    rpc SendSms(SmsRequest) returns (SmsResponse) {}
    // 验证短信验证码，不建议使用，请直接使用对应的 SmsXXX方法
    rpc ValidateSms(SmsValidateRequest) returns (SmsValidateResponse) {}
    // 更改用户密码， 用户identity、old_password、new_password必须填写
    rpc ChangePassword (ChangePasswordRequest) returns (User) {}
    // 短信更改用户密码， 用户session、code、new_password必须填写
    rpc SmsChangePassword (SmsChangePasswordRequest) returns (User) {}
    // 废弃， 请使用update
    // rpc ChangeName (User) returns (User) {}
    // 废弃， 请使用update
    // rpc ChangeEmail (User) returns (User) {}
    rpc BindThirdPartyLogin (ThirdPartyLoginInfo) returns (User) {}
    rpc RemoveThirdPartyLogin (ThirdPartyLoginInfo) returns (User) {}
    rpc ThirdPartyLogin (ThirdPartyLoginInfo) returns (User) {}
    rpc CreateOauthInfo(OauthInfo)returns (OauthInfo) {}
    rpc RefreshOauthToken(OauthInfo)returns (OauthInfo) {}
    rpc CheckAccessToken(OauthInfo)returns (OauthInfo) {}
    rpc CreatePayment(Payment)returns (Payment) {}
    rpc CompletePayment(Payment)returns (Payment) {}
    rpc FailedPayment(Payment)returns (Payment) {}
}


message User {
    int64  identity = 1;
    string name = 2;
    string password = 3;
    string salt = 4;
    string country_code = 5;
    string phone = 6;
    string email = 7;
    int64  create_time = 8;
    string create_addr = 9;
    string icon = 10;
    int64 space_used = 11;
    int64 space_capacity = 12;
    int32 type = 13;
    int32  status = 14;
    int32 version = 15;
    int32 vip = 16;
    int64  vip_expire_time = 17; // [json_name="payaya"] seems not working for normal json
    int64  last_activate_time = 18; // when last login, activate, ... etc
}

message OauthInfo {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_in = 3;
    int64 user_identity = 4;
    string scope = 5; 
    string app_identity = 6;
    string app_name = 7;
    int64 login_time = 8;
    string login_address = 9;
}
/*
message SmsCapchaRequest {
    string request_address = 1;
    int32 type = 2;
}

message SmsCapchaResponse {
    string session = 1;
    int32 type = 2;
}
*/

message SmsRequest {
    string country_code = 1;
    string phone = 2;
    int32 type = 3;
    int64 expire_in_ms = 4;
    string tpl = 5;
    repeated string params = 6;
    string request_address = 7;
    string ticket = 8;
}

message SmsResponse {
    string session = 1;
    int32 type = 2;
    int64 expire_time = 3;
}

message Payment {
    string order_identity = 1;
    int32 type = 2;
    int64 create_time = 3;
    int64 update_time = 4;
    int32 status = 5;
    int64 amount = 6;
    string data = 7;
    int64 user_identity = 8;
    int32 addon_int = 9;
    int64 addon_long = 10;
    int64 addon_string = 11;
}

message SmsValidateRequest {
    string session = 1;
    string code = 2;
}

message SmsValidateResponse {
    bool success = 1;
    int32 left = 2;
}

message Log {
    int64  identity = 1;
    int64 user_identity = 2;
    string device = 4;
    string country = 5;
    string country_code = 6;
    string province = 7;
    string city = 8;
    string city_code = 9;
    string  isp = 10;
    string create_addr = 11;
    int64 create_time = 12;
    int32 type = 13;
    string info = 14;
    int32 level = 15;
}

message Balance {
    int64  identity = 1;
    int64  space_used = 2;
    int64  space_limit = 3;
    int64  traffic_used = 4;
    int64  traffic_limit = 5;
    int64  offline_task_used  = 6;
	int64  offline_task_limit = 7;
}

message ChangePasswordRequest {
    int64  identity = 1;
    string  old_password = 2;
    string  new_password = 3;
    // bool direct = 4;
}

message SmsChangePasswordRequest {
    string session = 1;
    string code = 2;
    string  new_password = 3;
}

message SmsCreateRequest {
    string session = 1;
    string code = 2;
    string password = 3;
    string email = 4;       // 邮箱
    string name = 5;        // 用户名
    string create_addr = 6; // 用户IP地址
}


message ThirdPartyLoginInfo {
    string open_id = 1;
    int64 type = 2;
    int64 user_identity = 3;
    string access_key = 4;
    string refresh_key = 5;
    int64 last_active_time = 6;
}

