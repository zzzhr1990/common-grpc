// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ZipFileServiceClient is the client API for ZipFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZipFileServiceClient interface {
	CreateZipDownload(ctx context.Context, in *CreateZipDownloadRequest, opts ...grpc.CallOption) (*ZipDownloadInfo, error)
	GetZipDownload(ctx context.Context, in *ZipDownloadInfo, opts ...grpc.CallOption) (*ZipDownloadInfo, error)
	GetZipDetail(ctx context.Context, in *ZipDownloadInfo, opts ...grpc.CallOption) (*ZipDownloadDetail, error)
}

type zipFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZipFileServiceClient(cc grpc.ClientConnInterface) ZipFileServiceClient {
	return &zipFileServiceClient{cc}
}

func (c *zipFileServiceClient) CreateZipDownload(ctx context.Context, in *CreateZipDownloadRequest, opts ...grpc.CallOption) (*ZipDownloadInfo, error) {
	out := new(ZipDownloadInfo)
	err := c.cc.Invoke(ctx, "/services.ZipFileService/CreateZipDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zipFileServiceClient) GetZipDownload(ctx context.Context, in *ZipDownloadInfo, opts ...grpc.CallOption) (*ZipDownloadInfo, error) {
	out := new(ZipDownloadInfo)
	err := c.cc.Invoke(ctx, "/services.ZipFileService/GetZipDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zipFileServiceClient) GetZipDetail(ctx context.Context, in *ZipDownloadInfo, opts ...grpc.CallOption) (*ZipDownloadDetail, error) {
	out := new(ZipDownloadDetail)
	err := c.cc.Invoke(ctx, "/services.ZipFileService/GetZipDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZipFileServiceServer is the server API for ZipFileService service.
// All implementations must embed UnimplementedZipFileServiceServer
// for forward compatibility
type ZipFileServiceServer interface {
	CreateZipDownload(context.Context, *CreateZipDownloadRequest) (*ZipDownloadInfo, error)
	GetZipDownload(context.Context, *ZipDownloadInfo) (*ZipDownloadInfo, error)
	GetZipDetail(context.Context, *ZipDownloadInfo) (*ZipDownloadDetail, error)
	mustEmbedUnimplementedZipFileServiceServer()
}

// UnimplementedZipFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZipFileServiceServer struct {
}

func (UnimplementedZipFileServiceServer) CreateZipDownload(context.Context, *CreateZipDownloadRequest) (*ZipDownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZipDownload not implemented")
}
func (UnimplementedZipFileServiceServer) GetZipDownload(context.Context, *ZipDownloadInfo) (*ZipDownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZipDownload not implemented")
}
func (UnimplementedZipFileServiceServer) GetZipDetail(context.Context, *ZipDownloadInfo) (*ZipDownloadDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZipDetail not implemented")
}
func (UnimplementedZipFileServiceServer) mustEmbedUnimplementedZipFileServiceServer() {}

// UnsafeZipFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZipFileServiceServer will
// result in compilation errors.
type UnsafeZipFileServiceServer interface {
	mustEmbedUnimplementedZipFileServiceServer()
}

func RegisterZipFileServiceServer(s grpc.ServiceRegistrar, srv ZipFileServiceServer) {
	s.RegisterService(&_ZipFileService_serviceDesc, srv)
}

func _ZipFileService_CreateZipDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZipDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZipFileServiceServer).CreateZipDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZipFileService/CreateZipDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZipFileServiceServer).CreateZipDownload(ctx, req.(*CreateZipDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZipFileService_GetZipDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZipDownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZipFileServiceServer).GetZipDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZipFileService/GetZipDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZipFileServiceServer).GetZipDownload(ctx, req.(*ZipDownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZipFileService_GetZipDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZipDownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZipFileServiceServer).GetZipDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZipFileService/GetZipDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZipFileServiceServer).GetZipDetail(ctx, req.(*ZipDownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZipFileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ZipFileService",
	HandlerType: (*ZipFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZipDownload",
			Handler:    _ZipFileService_CreateZipDownload_Handler,
		},
		{
			MethodName: "GetZipDownload",
			Handler:    _ZipFileService_GetZipDownload_Handler,
		},
		{
			MethodName: "GetZipDetail",
			Handler:    _ZipFileService_GetZipDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/compress.proto",
}
