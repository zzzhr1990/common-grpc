// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: offline/v3tasks.proto

package oldsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OldTaskServiceClient is the client API for OldTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OldTaskServiceClient interface {
	// getDetail detail
	Get(ctx context.Context, in *OldSystemTask, opts ...grpc.CallOption) (*OldSystemTaskDetail, error)
	GetFileInfo(ctx context.Context, in *OldFileInfo, opts ...grpc.CallOption) (*OldFileInfo, error)
}

type oldTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOldTaskServiceClient(cc grpc.ClientConnInterface) OldTaskServiceClient {
	return &oldTaskServiceClient{cc}
}

func (c *oldTaskServiceClient) Get(ctx context.Context, in *OldSystemTask, opts ...grpc.CallOption) (*OldSystemTaskDetail, error) {
	out := new(OldSystemTaskDetail)
	err := c.cc.Invoke(ctx, "/v5.services.OldTaskService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oldTaskServiceClient) GetFileInfo(ctx context.Context, in *OldFileInfo, opts ...grpc.CallOption) (*OldFileInfo, error) {
	out := new(OldFileInfo)
	err := c.cc.Invoke(ctx, "/v5.services.OldTaskService/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OldTaskServiceServer is the server API for OldTaskService service.
// All implementations must embed UnimplementedOldTaskServiceServer
// for forward compatibility
type OldTaskServiceServer interface {
	// getDetail detail
	Get(context.Context, *OldSystemTask) (*OldSystemTaskDetail, error)
	GetFileInfo(context.Context, *OldFileInfo) (*OldFileInfo, error)
	mustEmbedUnimplementedOldTaskServiceServer()
}

// UnimplementedOldTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOldTaskServiceServer struct {
}

func (UnimplementedOldTaskServiceServer) Get(context.Context, *OldSystemTask) (*OldSystemTaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOldTaskServiceServer) GetFileInfo(context.Context, *OldFileInfo) (*OldFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedOldTaskServiceServer) mustEmbedUnimplementedOldTaskServiceServer() {}

// UnsafeOldTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OldTaskServiceServer will
// result in compilation errors.
type UnsafeOldTaskServiceServer interface {
	mustEmbedUnimplementedOldTaskServiceServer()
}

func RegisterOldTaskServiceServer(s grpc.ServiceRegistrar, srv OldTaskServiceServer) {
	s.RegisterService(&OldTaskService_ServiceDesc, srv)
}

func _OldTaskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OldSystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OldTaskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.OldTaskService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OldTaskServiceServer).Get(ctx, req.(*OldSystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _OldTaskService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OldFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OldTaskServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.OldTaskService/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OldTaskServiceServer).GetFileInfo(ctx, req.(*OldFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// OldTaskService_ServiceDesc is the grpc.ServiceDesc for OldTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OldTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v5.services.OldTaskService",
	HandlerType: (*OldTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _OldTaskService_Get_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _OldTaskService_GetFileInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline/v3tasks.proto",
}
