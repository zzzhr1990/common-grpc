// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 强行创建用户（仅后台使用）
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 短信创建用户，password、email、name 选填项目，如果不填写，系统会随机生成
	SmsCreate(ctx context.Context, in *SmsCreateRequest, opts ...grpc.CallOption) (*User, error)
	// 获取用户信息，仅需要传递 identity，如果没有 返回空用户实体（identity = 0）
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 查找用户/判断用户存在，仅需要传递 identity，或者是phone+country_code，如果没有 返回空用户实体（identity = 0）
	FindOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 校验密码并登录， 支持 phone+country_code+password/ name+country_code+password，如果没有 返回空用户实体（identity = 0）
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// SMS login, send session and code, return empty user info instead of error if not success
	SmsLogin(ctx context.Context, in *SmsValidateRequest, opts ...grpc.CallOption) (*User, error)
	SmsChangePhone(ctx context.Context, in *SmsValidateRequestChange, opts ...grpc.CallOption) (*User, error)
	// rpc SmsInput (SmsValidateRequest) returns (User) {}
	// 强行登录用户（仅后台使用）
	LoginDirect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 登出（记录用户登录操作）
	Logoff(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 更新用户信息，identity是必填项目，其他选填， 但是不能更改密码
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	FindNextOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CheckCanCreateFile(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateStatistics(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	SmsDeleteAccount(ctx context.Context, in *SmsDeleteAccountRequest, opts ...grpc.CallOption) (*User, error)
	// rpc getBalance (Balance) returns (Balance) {}
	// rpc setSpaceUsed (Balance) returns (Balance) {}
	// 发送短信
	SendSms(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error)
	// 验证短信验证码，不建议使用，请直接使用对应的 SmsXXX方法
	ValidateSms(ctx context.Context, in *SmsValidateRequest, opts ...grpc.CallOption) (*SmsValidateResponse, error)
	// 更改用户密码， 用户identity、old_password、new_password必须填写
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*User, error)
	// 短信更改用户密码， 用户session、code、new_password必须填写
	SmsChangePassword(ctx context.Context, in *SmsChangePasswordRequest, opts ...grpc.CallOption) (*User, error)
	// 废弃， 请使用update
	// rpc ChangeName (User) returns (User) {}
	// 废弃， 请使用update
	// rpc ChangeEmail (User) returns (User) {}
	BindThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error)
	RemoveThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error)
	ThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error)
	CreateOauthInfo(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error)
	RefreshOauthToken(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error)
	CheckAccessToken(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error)
	CreatePayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error)
	CompletePayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error)
	FailedPayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error)
	RequestChangePhone(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
	RequestRemoveAccount(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
	CancelLaterAction(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
	ChangePhone(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
	GetLaterAction(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
	DeleteAccount(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SmsCreate(ctx context.Context, in *SmsCreateRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/SmsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SmsLogin(ctx context.Context, in *SmsValidateRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/SmsLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SmsChangePhone(ctx context.Context, in *SmsValidateRequestChange, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/SmsChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginDirect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/LoginDirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logoff(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Logoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindNextOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/FindNextOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckCanCreateFile(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/CheckCanCreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStatistics(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/UpdateStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SmsDeleteAccount(ctx context.Context, in *SmsDeleteAccountRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/SmsDeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendSms(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error) {
	out := new(SmsResponse)
	err := c.cc.Invoke(ctx, "/services.UserService/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateSms(ctx context.Context, in *SmsValidateRequest, opts ...grpc.CallOption) (*SmsValidateResponse, error) {
	out := new(SmsValidateResponse)
	err := c.cc.Invoke(ctx, "/services.UserService/ValidateSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SmsChangePassword(ctx context.Context, in *SmsChangePasswordRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/SmsChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/BindThirdPartyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/RemoveThirdPartyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ThirdPartyLogin(ctx context.Context, in *ThirdPartyLoginInfo, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/ThirdPartyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateOauthInfo(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error) {
	out := new(OauthInfo)
	err := c.cc.Invoke(ctx, "/services.UserService/CreateOauthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshOauthToken(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error) {
	out := new(OauthInfo)
	err := c.cc.Invoke(ctx, "/services.UserService/RefreshOauthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckAccessToken(ctx context.Context, in *OauthInfo, opts ...grpc.CallOption) (*OauthInfo, error) {
	out := new(OauthInfo)
	err := c.cc.Invoke(ctx, "/services.UserService/CheckAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error) {
	out := new(SubscriptionPayment)
	err := c.cc.Invoke(ctx, "/services.UserService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CompletePayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error) {
	out := new(SubscriptionPayment)
	err := c.cc.Invoke(ctx, "/services.UserService/CompletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FailedPayment(ctx context.Context, in *SubscriptionPayment, opts ...grpc.CallOption) (*SubscriptionPayment, error) {
	out := new(SubscriptionPayment)
	err := c.cc.Invoke(ctx, "/services.UserService/FailedPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestChangePhone(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/RequestChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestRemoveAccount(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/RequestRemoveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CancelLaterAction(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/CancelLaterAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePhone(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/ChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLaterAction(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/GetLaterAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAccount(ctx context.Context, in *LaterAction, opts ...grpc.CallOption) (*LaterAction, error) {
	out := new(LaterAction)
	err := c.cc.Invoke(ctx, "/services.UserService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 强行创建用户（仅后台使用）
	Create(context.Context, *User) (*User, error)
	// 短信创建用户，password、email、name 选填项目，如果不填写，系统会随机生成
	SmsCreate(context.Context, *SmsCreateRequest) (*User, error)
	// 获取用户信息，仅需要传递 identity，如果没有 返回空用户实体（identity = 0）
	Get(context.Context, *User) (*User, error)
	// 查找用户/判断用户存在，仅需要传递 identity，或者是phone+country_code，如果没有 返回空用户实体（identity = 0）
	FindOne(context.Context, *User) (*User, error)
	// 校验密码并登录， 支持 phone+country_code+password/ name+country_code+password，如果没有 返回空用户实体（identity = 0）
	Login(context.Context, *User) (*User, error)
	// SMS login, send session and code, return empty user info instead of error if not success
	SmsLogin(context.Context, *SmsValidateRequest) (*User, error)
	SmsChangePhone(context.Context, *SmsValidateRequestChange) (*User, error)
	// rpc SmsInput (SmsValidateRequest) returns (User) {}
	// 强行登录用户（仅后台使用）
	LoginDirect(context.Context, *User) (*User, error)
	// 登出（记录用户登录操作）
	Logoff(context.Context, *User) (*User, error)
	// 更新用户信息，identity是必填项目，其他选填， 但是不能更改密码
	Update(context.Context, *User) (*User, error)
	FindNextOne(context.Context, *User) (*User, error)
	CheckCanCreateFile(context.Context, *User) (*User, error)
	UpdateStatistics(context.Context, *User) (*User, error)
	SmsDeleteAccount(context.Context, *SmsDeleteAccountRequest) (*User, error)
	// rpc getBalance (Balance) returns (Balance) {}
	// rpc setSpaceUsed (Balance) returns (Balance) {}
	// 发送短信
	SendSms(context.Context, *SmsRequest) (*SmsResponse, error)
	// 验证短信验证码，不建议使用，请直接使用对应的 SmsXXX方法
	ValidateSms(context.Context, *SmsValidateRequest) (*SmsValidateResponse, error)
	// 更改用户密码， 用户identity、old_password、new_password必须填写
	ChangePassword(context.Context, *ChangePasswordRequest) (*User, error)
	// 短信更改用户密码， 用户session、code、new_password必须填写
	SmsChangePassword(context.Context, *SmsChangePasswordRequest) (*User, error)
	// 废弃， 请使用update
	// rpc ChangeName (User) returns (User) {}
	// 废弃， 请使用update
	// rpc ChangeEmail (User) returns (User) {}
	BindThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error)
	RemoveThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error)
	ThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error)
	CreateOauthInfo(context.Context, *OauthInfo) (*OauthInfo, error)
	RefreshOauthToken(context.Context, *OauthInfo) (*OauthInfo, error)
	CheckAccessToken(context.Context, *OauthInfo) (*OauthInfo, error)
	CreatePayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error)
	CompletePayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error)
	FailedPayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error)
	RequestChangePhone(context.Context, *LaterAction) (*LaterAction, error)
	RequestRemoveAccount(context.Context, *LaterAction) (*LaterAction, error)
	CancelLaterAction(context.Context, *LaterAction) (*LaterAction, error)
	ChangePhone(context.Context, *LaterAction) (*LaterAction, error)
	GetLaterAction(context.Context, *LaterAction) (*LaterAction, error)
	DeleteAccount(context.Context, *LaterAction) (*LaterAction, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Create(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServiceServer) SmsCreate(context.Context, *SmsCreateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsCreate not implemented")
}
func (UnimplementedUserServiceServer) Get(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserServiceServer) FindOne(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) SmsLogin(context.Context, *SmsValidateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedUserServiceServer) SmsChangePhone(context.Context, *SmsValidateRequestChange) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsChangePhone not implemented")
}
func (UnimplementedUserServiceServer) LoginDirect(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDirect not implemented")
}
func (UnimplementedUserServiceServer) Logoff(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) FindNextOne(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNextOne not implemented")
}
func (UnimplementedUserServiceServer) CheckCanCreateFile(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCanCreateFile not implemented")
}
func (UnimplementedUserServiceServer) UpdateStatistics(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatistics not implemented")
}
func (UnimplementedUserServiceServer) SmsDeleteAccount(context.Context, *SmsDeleteAccountRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsDeleteAccount not implemented")
}
func (UnimplementedUserServiceServer) SendSms(context.Context, *SmsRequest) (*SmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServiceServer) ValidateSms(context.Context, *SmsValidateRequest) (*SmsValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSms not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) SmsChangePassword(context.Context, *SmsChangePasswordRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsChangePassword not implemented")
}
func (UnimplementedUserServiceServer) BindThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindThirdPartyLogin not implemented")
}
func (UnimplementedUserServiceServer) RemoveThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveThirdPartyLogin not implemented")
}
func (UnimplementedUserServiceServer) ThirdPartyLogin(context.Context, *ThirdPartyLoginInfo) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdPartyLogin not implemented")
}
func (UnimplementedUserServiceServer) CreateOauthInfo(context.Context, *OauthInfo) (*OauthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthInfo not implemented")
}
func (UnimplementedUserServiceServer) RefreshOauthToken(context.Context, *OauthInfo) (*OauthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshOauthToken not implemented")
}
func (UnimplementedUserServiceServer) CheckAccessToken(context.Context, *OauthInfo) (*OauthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccessToken not implemented")
}
func (UnimplementedUserServiceServer) CreatePayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedUserServiceServer) CompletePayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePayment not implemented")
}
func (UnimplementedUserServiceServer) FailedPayment(context.Context, *SubscriptionPayment) (*SubscriptionPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailedPayment not implemented")
}
func (UnimplementedUserServiceServer) RequestChangePhone(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangePhone not implemented")
}
func (UnimplementedUserServiceServer) RequestRemoveAccount(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRemoveAccount not implemented")
}
func (UnimplementedUserServiceServer) CancelLaterAction(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLaterAction not implemented")
}
func (UnimplementedUserServiceServer) ChangePhone(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (UnimplementedUserServiceServer) GetLaterAction(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaterAction not implemented")
}
func (UnimplementedUserServiceServer) DeleteAccount(context.Context, *LaterAction) (*LaterAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SmsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SmsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SmsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SmsCreate(ctx, req.(*SmsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOne(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SmsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SmsLogin(ctx, req.(*SmsValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SmsChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsValidateRequestChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SmsChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SmsChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SmsChangePhone(ctx, req.(*SmsValidateRequestChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/LoginDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginDirect(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Logoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logoff(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindNextOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindNextOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/FindNextOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindNextOne(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckCanCreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckCanCreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CheckCanCreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckCanCreateFile(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/UpdateStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStatistics(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SmsDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsDeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SmsDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SmsDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SmsDeleteAccount(ctx, req.(*SmsDeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendSms(ctx, req.(*SmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/ValidateSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateSms(ctx, req.(*SmsValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SmsChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SmsChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/SmsChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SmsChangePassword(ctx, req.(*SmsChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindThirdPartyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindThirdPartyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/BindThirdPartyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindThirdPartyLogin(ctx, req.(*ThirdPartyLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveThirdPartyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveThirdPartyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/RemoveThirdPartyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveThirdPartyLogin(ctx, req.(*ThirdPartyLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ThirdPartyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ThirdPartyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/ThirdPartyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ThirdPartyLogin(ctx, req.(*ThirdPartyLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateOauthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOauthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CreateOauthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOauthInfo(ctx, req.(*OauthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshOauthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshOauthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/RefreshOauthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshOauthToken(ctx, req.(*OauthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CheckAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckAccessToken(ctx, req.(*OauthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePayment(ctx, req.(*SubscriptionPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CompletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CompletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CompletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CompletePayment(ctx, req.(*SubscriptionPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FailedPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FailedPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/FailedPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FailedPayment(ctx, req.(*SubscriptionPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RequestChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RequestChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/RequestChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RequestChangePhone(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RequestRemoveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RequestRemoveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/RequestRemoveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RequestRemoveAccount(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CancelLaterAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CancelLaterAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/CancelLaterAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CancelLaterAction(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePhone(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLaterAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLaterAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/GetLaterAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLaterAction(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaterAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAccount(ctx, req.(*LaterAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "SmsCreate",
			Handler:    _UserService_SmsCreate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _UserService_FindOne_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "SmsLogin",
			Handler:    _UserService_SmsLogin_Handler,
		},
		{
			MethodName: "SmsChangePhone",
			Handler:    _UserService_SmsChangePhone_Handler,
		},
		{
			MethodName: "LoginDirect",
			Handler:    _UserService_LoginDirect_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _UserService_Logoff_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "FindNextOne",
			Handler:    _UserService_FindNextOne_Handler,
		},
		{
			MethodName: "CheckCanCreateFile",
			Handler:    _UserService_CheckCanCreateFile_Handler,
		},
		{
			MethodName: "UpdateStatistics",
			Handler:    _UserService_UpdateStatistics_Handler,
		},
		{
			MethodName: "SmsDeleteAccount",
			Handler:    _UserService_SmsDeleteAccount_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _UserService_SendSms_Handler,
		},
		{
			MethodName: "ValidateSms",
			Handler:    _UserService_ValidateSms_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "SmsChangePassword",
			Handler:    _UserService_SmsChangePassword_Handler,
		},
		{
			MethodName: "BindThirdPartyLogin",
			Handler:    _UserService_BindThirdPartyLogin_Handler,
		},
		{
			MethodName: "RemoveThirdPartyLogin",
			Handler:    _UserService_RemoveThirdPartyLogin_Handler,
		},
		{
			MethodName: "ThirdPartyLogin",
			Handler:    _UserService_ThirdPartyLogin_Handler,
		},
		{
			MethodName: "CreateOauthInfo",
			Handler:    _UserService_CreateOauthInfo_Handler,
		},
		{
			MethodName: "RefreshOauthToken",
			Handler:    _UserService_RefreshOauthToken_Handler,
		},
		{
			MethodName: "CheckAccessToken",
			Handler:    _UserService_CheckAccessToken_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _UserService_CreatePayment_Handler,
		},
		{
			MethodName: "CompletePayment",
			Handler:    _UserService_CompletePayment_Handler,
		},
		{
			MethodName: "FailedPayment",
			Handler:    _UserService_FailedPayment_Handler,
		},
		{
			MethodName: "RequestChangePhone",
			Handler:    _UserService_RequestChangePhone_Handler,
		},
		{
			MethodName: "RequestRemoveAccount",
			Handler:    _UserService_RequestRemoveAccount_Handler,
		},
		{
			MethodName: "CancelLaterAction",
			Handler:    _UserService_CancelLaterAction_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _UserService_ChangePhone_Handler,
		},
		{
			MethodName: "GetLaterAction",
			Handler:    _UserService_GetLaterAction_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserService_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/info.proto",
}
