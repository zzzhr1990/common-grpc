// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/info.proto

package info

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Salt                 string   `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Phone                string   `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime           int64    `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateAddr           string   `protobuf:"bytes,9,opt,name=create_addr,json=createAddr,proto3" json:"create_addr,omitempty"`
	Icon                 string   `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`
	SpaceUsed            int64    `protobuf:"varint,11,opt,name=space_used,json=spaceUsed,proto3" json:"space_used,omitempty"`
	SpaceCapacity        int64    `protobuf:"varint,12,opt,name=space_capacity,json=spaceCapacity,proto3" json:"space_capacity,omitempty"`
	Type                 int32    `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
	Status               int32    `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Version              int32    `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	Vip                  int32    `protobuf:"varint,16,opt,name=vip,proto3" json:"vip,omitempty"`
	VipExpireTime        int64    `protobuf:"varint,17,opt,name=vip_expire_time,json=vipExpireTime,proto3" json:"vip_expire_time,omitempty"`
	LastActivateTime     int64    `protobuf:"varint,18,opt,name=last_activate_time,json=lastActivateTime,proto3" json:"last_activate_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_e397bf9a47fd544a, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *User) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *User) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *User) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *User) GetSpaceUsed() int64 {
	if m != nil {
		return m.SpaceUsed
	}
	return 0
}

func (m *User) GetSpaceCapacity() int64 {
	if m != nil {
		return m.SpaceCapacity
	}
	return 0
}

func (m *User) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *User) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *User) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *User) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *User) GetVipExpireTime() int64 {
	if m != nil {
		return m.VipExpireTime
	}
	return 0
}

func (m *User) GetLastActivateTime() int64 {
	if m != nil {
		return m.LastActivateTime
	}
	return 0
}

type Log struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	UserIdentity         int64    `protobuf:"varint,2,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Device               string   `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	Country              string   `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	CountryCode          string   `protobuf:"bytes,6,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Province             string   `protobuf:"bytes,7,opt,name=province,proto3" json:"province,omitempty"`
	City                 string   `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	CityCode             string   `protobuf:"bytes,9,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	Isp                  string   `protobuf:"bytes,10,opt,name=isp,proto3" json:"isp,omitempty"`
	CreateAddr           string   `protobuf:"bytes,11,opt,name=create_addr,json=createAddr,proto3" json:"create_addr,omitempty"`
	CreateTime           int64    `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Type                 int32    `protobuf:"varint,13,opt,name=type,proto3" json:"type,omitempty"`
	Info                 string   `protobuf:"bytes,14,opt,name=info,proto3" json:"info,omitempty"`
	Level                int32    `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_e397bf9a47fd544a, []int{1}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *Log) GetUserIdentity() int64 {
	if m != nil {
		return m.UserIdentity
	}
	return 0
}

func (m *Log) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Log) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Log) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Log) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Log) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Log) GetCityCode() string {
	if m != nil {
		return m.CityCode
	}
	return ""
}

func (m *Log) GetIsp() string {
	if m != nil {
		return m.Isp
	}
	return ""
}

func (m *Log) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *Log) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Log) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Log) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Log) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Balance struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	SpaceUsed            int64    `protobuf:"varint,2,opt,name=space_used,json=spaceUsed,proto3" json:"space_used,omitempty"`
	SpaceLimit           int64    `protobuf:"varint,3,opt,name=space_limit,json=spaceLimit,proto3" json:"space_limit,omitempty"`
	TrafficUsed          int64    `protobuf:"varint,4,opt,name=traffic_used,json=trafficUsed,proto3" json:"traffic_used,omitempty"`
	TrafficLimit         int64    `protobuf:"varint,5,opt,name=traffic_limit,json=trafficLimit,proto3" json:"traffic_limit,omitempty"`
	OfflineTaskUsed      int64    `protobuf:"varint,6,opt,name=offline_task_used,json=offlineTaskUsed,proto3" json:"offline_task_used,omitempty"`
	OfflineTaskLimit     int64    `protobuf:"varint,7,opt,name=offline_task_limit,json=offlineTaskLimit,proto3" json:"offline_task_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e397bf9a47fd544a, []int{2}
}

func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *Balance) GetSpaceUsed() int64 {
	if m != nil {
		return m.SpaceUsed
	}
	return 0
}

func (m *Balance) GetSpaceLimit() int64 {
	if m != nil {
		return m.SpaceLimit
	}
	return 0
}

func (m *Balance) GetTrafficUsed() int64 {
	if m != nil {
		return m.TrafficUsed
	}
	return 0
}

func (m *Balance) GetTrafficLimit() int64 {
	if m != nil {
		return m.TrafficLimit
	}
	return 0
}

func (m *Balance) GetOfflineTaskUsed() int64 {
	if m != nil {
		return m.OfflineTaskUsed
	}
	return 0
}

func (m *Balance) GetOfflineTaskLimit() int64 {
	if m != nil {
		return m.OfflineTaskLimit
	}
	return 0
}

type PasswordPair struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	OldPassword          string   `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword          string   `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	Direct               bool     `protobuf:"varint,4,opt,name=direct,proto3" json:"direct,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordPair) Reset()         { *m = PasswordPair{} }
func (m *PasswordPair) String() string { return proto.CompactTextString(m) }
func (*PasswordPair) ProtoMessage()    {}
func (*PasswordPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e397bf9a47fd544a, []int{3}
}

func (m *PasswordPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordPair.Unmarshal(m, b)
}
func (m *PasswordPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordPair.Marshal(b, m, deterministic)
}
func (m *PasswordPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordPair.Merge(m, src)
}
func (m *PasswordPair) XXX_Size() int {
	return xxx_messageInfo_PasswordPair.Size(m)
}
func (m *PasswordPair) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordPair.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordPair proto.InternalMessageInfo

func (m *PasswordPair) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *PasswordPair) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *PasswordPair) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *PasswordPair) GetDirect() bool {
	if m != nil {
		return m.Direct
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "services.User")
	proto.RegisterType((*Log)(nil), "services.Log")
	proto.RegisterType((*Balance)(nil), "services.Balance")
	proto.RegisterType((*PasswordPair)(nil), "services.PasswordPair")
}

func init() { proto.RegisterFile("user/info.proto", fileDescriptor_e397bf9a47fd544a) }

var fileDescriptor_e397bf9a47fd544a = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x9d, 0xad, 0x58, 0x76, 0xae, 0x9c, 0xd8, 0x25, 0x86, 0x82, 0xe8, 0x30, 0x34, 0x75, 0xb1,
	0x2d, 0xcb, 0x3a, 0x7b, 0x1f, 0xc0, 0xb0, 0xee, 0xad, 0xf5, 0x3e, 0x30, 0xc0, 0xc0, 0x0a, 0xaf,
	0x79, 0xd9, 0x8b, 0xc0, 0x4a, 0x94, 0x4d, 0x54, 0x22, 0x05, 0x92, 0x56, 0x96, 0xfc, 0x81, 0xed,
	0x37, 0xef, 0xa5, 0x03, 0x2f, 0x69, 0x35, 0xb1, 0x8b, 0xc0, 0x4f, 0xe1, 0x3d, 0xf7, 0xf0, 0x84,
	0xe4, 0x39, 0xbe, 0x82, 0xd1, 0xc6, 0x70, 0x3d, 0x13, 0xb2, 0x50, 0xd3, 0x5a, 0x2b, 0xab, 0xc8,
	0xc0, 0x70, 0xdd, 0x88, 0x8c, 0x9b, 0xc9, 0xbb, 0x08, 0x8e, 0x2e, 0x0d, 0xd7, 0xe4, 0x11, 0x0c,
	0x44, 0xce, 0xa5, 0x15, 0xf6, 0x9a, 0x76, 0xce, 0x3a, 0xe7, 0xd1, 0xb2, 0xad, 0x09, 0x81, 0x23,
	0xc9, 0x2a, 0x4e, 0xbb, 0x67, 0x9d, 0xf3, 0xe3, 0x25, 0xae, 0x1d, 0xbf, 0x66, 0xc6, 0x5c, 0x29,
	0x9d, 0xd3, 0x08, 0xf1, 0xb6, 0x76, 0x7c, 0xc3, 0x4a, 0x4b, 0x8f, 0x3c, 0xdf, 0xad, 0xc9, 0x13,
	0x18, 0x66, 0x6a, 0x23, 0xad, 0xbe, 0x4e, 0x33, 0x95, 0x73, 0xda, 0xc3, 0x5e, 0x12, 0xb0, 0xb9,
	0xca, 0x39, 0xf9, 0x18, 0x7a, 0xf5, 0x5a, 0x49, 0x4e, 0x63, 0xec, 0xf9, 0xc2, 0xa1, 0xbc, 0x62,
	0xa2, 0xa4, 0x7d, 0x8f, 0x62, 0x41, 0x1e, 0x43, 0x92, 0x69, 0xce, 0x2c, 0x4f, 0xad, 0xa8, 0x38,
	0x1d, 0xe0, 0x89, 0xc1, 0x43, 0xaf, 0x45, 0xc5, 0x6f, 0x11, 0x58, 0x9e, 0x6b, 0x7a, 0x8c, 0x9b,
	0x03, 0xe1, 0x45, 0x9e, 0x6b, 0x77, 0x48, 0x91, 0x29, 0x49, 0xc1, 0x1f, 0xd2, 0xad, 0xc9, 0xa7,
	0x00, 0xa6, 0x66, 0x19, 0x4f, 0x37, 0x86, 0xe7, 0x34, 0x41, 0xd1, 0x63, 0x44, 0x2e, 0x0d, 0xcf,
	0xc9, 0x67, 0x70, 0xea, 0xdb, 0x19, 0xab, 0x59, 0xe6, 0x5e, 0x6a, 0x88, 0x94, 0x13, 0x44, 0xe7,
	0x01, 0x74, 0xca, 0xf6, 0xba, 0xe6, 0xf4, 0xe4, 0xac, 0x73, 0xde, 0x5b, 0xe2, 0x9a, 0x3c, 0x84,
	0xd8, 0x58, 0x66, 0x37, 0x86, 0x9e, 0x22, 0x1a, 0x2a, 0x42, 0xa1, 0xdf, 0x70, 0x6d, 0x84, 0x92,
	0x74, 0x84, 0x8d, 0x6d, 0x49, 0xc6, 0x10, 0x35, 0xa2, 0xa6, 0x63, 0x44, 0xdd, 0x92, 0x7c, 0x0e,
	0xa3, 0x46, 0xd4, 0x29, 0xff, 0xbb, 0x16, 0x3a, 0xdc, 0xfb, 0x81, 0xff, 0xff, 0x8d, 0xa8, 0x7f,
	0x41, 0x14, 0xaf, 0xfe, 0x0c, 0x48, 0xc9, 0x8c, 0x4d, 0x59, 0x66, 0x45, 0xd3, 0x3e, 0x11, 0x41,
	0xea, 0xd8, 0x75, 0x5e, 0x84, 0x86, 0x63, 0x4f, 0xfe, 0xeb, 0x42, 0xb4, 0x50, 0xab, 0x7b, 0x03,
	0xf0, 0x14, 0x4e, 0x5c, 0x84, 0xd2, 0x96, 0xd0, 0x45, 0xc2, 0xd0, 0x81, 0xbf, 0x6f, 0x49, 0x0f,
	0x21, 0xce, 0xb9, 0x4b, 0x55, 0xf0, 0x3d, 0x54, 0xee, 0x8a, 0xc1, 0xe5, 0x60, 0xfa, 0xb6, 0xdc,
	0xcb, 0x44, 0xbc, 0x9f, 0x09, 0x17, 0x33, 0xad, 0x1a, 0x21, 0x33, 0x1e, 0x02, 0xd0, 0xd6, 0xee,
	0x9d, 0xd1, 0x84, 0x81, 0x77, 0x10, 0xdf, 0xfe, 0x13, 0x38, 0x76, 0x7f, 0xbd, 0x9e, 0x37, 0x7d,
	0xe0, 0x00, 0x14, 0x1b, 0x43, 0x24, 0x4c, 0x1d, 0x1c, 0x77, 0xcb, 0xdd, 0x94, 0x24, 0x7b, 0x29,
	0xd9, 0xc9, 0xd9, 0x70, 0x2f, 0x67, 0x1f, 0x32, 0xdb, 0x45, 0x4b, 0x16, 0x0a, 0xad, 0x76, 0xd1,
	0x92, 0x85, 0x72, 0x31, 0x2e, 0x79, 0xc3, 0xcb, 0x60, 0xb3, 0x2f, 0x26, 0xff, 0x74, 0xa1, 0xff,
	0x92, 0x95, 0xcc, 0x5d, 0xe7, 0x3e, 0x03, 0xee, 0x06, 0xb3, 0xbb, 0x1b, 0xcc, 0xc7, 0x90, 0xf8,
	0x76, 0x29, 0x2a, 0x61, 0xf1, 0xf7, 0x18, 0x2d, 0xfd, 0x8e, 0x85, 0x43, 0xdc, 0x4b, 0x5b, 0xcd,
	0x8a, 0x42, 0x64, 0x5e, 0xe1, 0x08, 0x19, 0x49, 0xc0, 0x50, 0xe3, 0x29, 0x9c, 0x6c, 0x29, 0x5e,
	0xa5, 0xe7, 0x3d, 0x0e, 0xa0, 0xd7, 0xb9, 0x80, 0x07, 0xaa, 0x28, 0x4a, 0x21, 0x79, 0x6a, 0x99,
	0x79, 0xeb, 0xc5, 0x62, 0x24, 0x8e, 0x42, 0xe3, 0x35, 0x33, 0x6f, 0x51, 0xf0, 0x19, 0x90, 0x3b,
	0x5c, 0xaf, 0xda, 0xf7, 0x31, 0xbc, 0x45, 0x46, 0xe5, 0xc9, 0xbf, 0x1d, 0x18, 0xbe, 0x0a, 0x03,
	0xe4, 0x15, 0x13, 0xf7, 0x0f, 0xa4, 0x27, 0x30, 0x54, 0x65, 0x9e, 0xb6, 0x03, 0xc8, 0x0f, 0xa6,
	0x44, 0x95, 0xf9, 0x56, 0xc2, 0x51, 0x24, 0xbf, 0x4a, 0x77, 0x66, 0x54, 0x22, 0xf9, 0x55, 0x4b,
	0x71, 0x81, 0x15, 0x9a, 0x67, 0x7e, 0x50, 0x0d, 0x96, 0xa1, 0xfa, 0xee, 0x5d, 0x17, 0x12, 0x37,
	0x13, 0xff, 0xf4, 0x43, 0x92, 0x5c, 0x40, 0x3c, 0x47, 0xc3, 0xc9, 0xe9, 0x74, 0x3b, 0x38, 0xa7,
	0x8e, 0xf0, 0x68, 0xa7, 0x9e, 0x7c, 0x44, 0xbe, 0x80, 0xe8, 0x37, 0x6e, 0x0f, 0x20, 0x7e, 0x05,
	0xfd, 0x5f, 0x85, 0xcc, 0xff, 0x90, 0x87, 0xa8, 0x7e, 0x09, 0xbd, 0x85, 0x5a, 0x09, 0x79, 0x00,
	0x75, 0x06, 0x09, 0x52, 0x7f, 0xc6, 0xbb, 0x1c, 0xb0, 0xe1, 0x02, 0xe2, 0x85, 0x5a, 0xa9, 0xa2,
	0x38, 0x8c, 0x7b, 0x59, 0xe7, 0x87, 0xbd, 0xc4, 0x4f, 0x70, 0x3a, 0x5f, 0x33, 0xb9, 0xe2, 0xef,
	0xdf, 0xfb, 0x3d, 0xe7, 0xb6, 0xd3, 0xfb, 0x7b, 0x5f, 0xfe, 0xf8, 0xd7, 0x0f, 0x2b, 0x61, 0xd7,
	0x9b, 0x37, 0xd3, 0x4c, 0x55, 0xb3, 0x9b, 0x9b, 0x9b, 0xb5, 0xfe, 0xf6, 0xf9, 0xf3, 0x6f, 0x66,
	0x99, 0xaa, 0x2a, 0x25, 0xbf, 0x5e, 0xe9, 0x3a, 0x9b, 0xad, 0xd4, 0x6c, 0xbb, 0x6d, 0xd6, 0x7e,
	0xdf, 0xde, 0xc4, 0xf8, 0x81, 0xfb, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xec, 0xf4,
	0xa3, 0xf3, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	FindOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	LoginDirect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Logoff(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// rpc getBalance (Balance) returns (Balance) {}
	// rpc setSpaceUsed (Balance) returns (Balance) {}
	ChangePassword(ctx context.Context, in *PasswordPair, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindOne(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginDirect(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/LoginDirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logoff(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Logoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *PasswordPair, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	Create(context.Context, *User) (*User, error)
	Get(context.Context, *User) (*User, error)
	FindOne(context.Context, *User) (*User, error)
	Login(context.Context, *User) (*User, error)
	LoginDirect(context.Context, *User) (*User, error)
	Logoff(context.Context, *User) (*User, error)
	Update(context.Context, *User) (*User, error)
	// rpc getBalance (Balance) returns (Balance) {}
	// rpc setSpaceUsed (Balance) returns (Balance) {}
	ChangePassword(context.Context, *PasswordPair) (*User, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Create(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserServiceServer) Get(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedUserServiceServer) FindOne(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (*UnimplementedUserServiceServer) Login(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserServiceServer) LoginDirect(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDirect not implemented")
}
func (*UnimplementedUserServiceServer) Logoff(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logoff not implemented")
}
func (*UnimplementedUserServiceServer) Update(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserServiceServer) ChangePassword(ctx context.Context, req *PasswordPair) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindOne(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/LoginDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginDirect(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Logoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logoff(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*PasswordPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _UserService_FindOne_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "LoginDirect",
			Handler:    _UserService_LoginDirect_Handler,
		},
		{
			MethodName: "Logoff",
			Handler:    _UserService_Logoff_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/info.proto",
}
