// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task/task.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FetchRequest struct {
	Consumer             string   `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Type                 []int32  `protobuf:"varint,2,rep,packed,name=type,proto3" json:"type,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Status               []int32  `protobuf:"varint,4,rep,packed,name=status,proto3" json:"status,omitempty"`
	Next                 int32    `protobuf:"varint,5,opt,name=next,proto3" json:"next,omitempty"`
	Deadline             int64    `protobuf:"varint,6,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Recover              bool     `protobuf:"varint,7,opt,name=recover,proto3" json:"recover,omitempty"`
	Desc                 bool     `protobuf:"varint,8,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchRequest) Reset()         { *m = FetchRequest{} }
func (m *FetchRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()    {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{0}
}

func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRequest.Unmarshal(m, b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
}
func (m *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(m, src)
}
func (m *FetchRequest) XXX_Size() int {
	return xxx_messageInfo_FetchRequest.Size(m)
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

func (m *FetchRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *FetchRequest) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FetchRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FetchRequest) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FetchRequest) GetNext() int32 {
	if m != nil {
		return m.Next
	}
	return 0
}

func (m *FetchRequest) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *FetchRequest) GetRecover() bool {
	if m != nil {
		return m.Recover
	}
	return false
}

func (m *FetchRequest) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

type SimpleTask struct {
	Identity             string   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Source               string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Consumer             string   `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Producer             string   `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`
	CreateTime           int64    `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ConsumerTime         int64    `protobuf:"varint,7,opt,name=consumer_time,json=consumerTime,proto3" json:"consumer_time,omitempty"`
	Deadline             int64    `protobuf:"varint,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Data                 string   `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	Status               int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTask) Reset()         { *m = SimpleTask{} }
func (m *SimpleTask) String() string { return proto.CompactTextString(m) }
func (*SimpleTask) ProtoMessage()    {}
func (*SimpleTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{1}
}

func (m *SimpleTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTask.Unmarshal(m, b)
}
func (m *SimpleTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTask.Marshal(b, m, deterministic)
}
func (m *SimpleTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTask.Merge(m, src)
}
func (m *SimpleTask) XXX_Size() int {
	return xxx_messageInfo_SimpleTask.Size(m)
}
func (m *SimpleTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTask.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTask proto.InternalMessageInfo

func (m *SimpleTask) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *SimpleTask) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SimpleTask) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SimpleTask) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *SimpleTask) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *SimpleTask) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SimpleTask) GetConsumerTime() int64 {
	if m != nil {
		return m.ConsumerTime
	}
	return 0
}

func (m *SimpleTask) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *SimpleTask) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SimpleTask) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ErrorTask struct {
	Seq                  int64    `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Identity             string   `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Source               string   `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Consumer             string   `protobuf:"bytes,5,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Producer             string   `protobuf:"bytes,6,opt,name=producer,proto3" json:"producer,omitempty"`
	CreateTime           int64    `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ConsumerTime         int64    `protobuf:"varint,8,opt,name=consumer_time,json=consumerTime,proto3" json:"consumer_time,omitempty"`
	Deadline             int64    `protobuf:"varint,9,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Data                 string   `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Status               int32    `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	ErrorCode            int32    `protobuf:"varint,12,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage         int32    `protobuf:"varint,13,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorTask) Reset()         { *m = ErrorTask{} }
func (m *ErrorTask) String() string { return proto.CompactTextString(m) }
func (*ErrorTask) ProtoMessage()    {}
func (*ErrorTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{2}
}

func (m *ErrorTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorTask.Unmarshal(m, b)
}
func (m *ErrorTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorTask.Marshal(b, m, deterministic)
}
func (m *ErrorTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorTask.Merge(m, src)
}
func (m *ErrorTask) XXX_Size() int {
	return xxx_messageInfo_ErrorTask.Size(m)
}
func (m *ErrorTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorTask.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorTask proto.InternalMessageInfo

func (m *ErrorTask) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ErrorTask) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ErrorTask) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ErrorTask) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ErrorTask) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *ErrorTask) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *ErrorTask) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ErrorTask) GetConsumerTime() int64 {
	if m != nil {
		return m.ConsumerTime
	}
	return 0
}

func (m *ErrorTask) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *ErrorTask) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ErrorTask) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ErrorTask) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorTask) GetErrorMessage() int32 {
	if m != nil {
		return m.ErrorMessage
	}
	return 0
}

type FetchResponse struct {
	Data                 []*SimpleTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FetchResponse) Reset()         { *m = FetchResponse{} }
func (m *FetchResponse) String() string { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()    {}
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{3}
}

func (m *FetchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchResponse.Unmarshal(m, b)
}
func (m *FetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchResponse.Marshal(b, m, deterministic)
}
func (m *FetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchResponse.Merge(m, src)
}
func (m *FetchResponse) XXX_Size() int {
	return xxx_messageInfo_FetchResponse.Size(m)
}
func (m *FetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchResponse proto.InternalMessageInfo

func (m *FetchResponse) GetData() []*SimpleTask {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchRequest)(nil), "services.FetchRequest")
	proto.RegisterType((*SimpleTask)(nil), "services.SimpleTask")
	proto.RegisterType((*ErrorTask)(nil), "services.ErrorTask")
	proto.RegisterType((*FetchResponse)(nil), "services.FetchResponse")
}

func init() { proto.RegisterFile("task/task.proto", fileDescriptor_8e8f2b86464a95fe) }

var fileDescriptor_8e8f2b86464a95fe = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0xc7, 0x71, 0x1c, 0x27, 0xf6, 0x10, 0xf4, 0x7d, 0xda, 0x22, 0xb0, 0x2c, 0x55, 0x8d, 0xdc,
	0x8b, 0x2f, 0x4d, 0x5a, 0xa8, 0xaa, 0x52, 0x55, 0x3d, 0x80, 0xe8, 0xad, 0x17, 0xc3, 0xa9, 0x17,
	0x64, 0xd6, 0xd3, 0x60, 0x81, 0xbd, 0x66, 0x77, 0x8d, 0x4a, 0x1e, 0xa5, 0x97, 0xbe, 0x4f, 0x5f,
	0xa6, 0xaf, 0x50, 0xed, 0x6c, 0x9c, 0x04, 0x9a, 0x40, 0xb9, 0x24, 0x33, 0x7f, 0xff, 0x3d, 0x3b,
	0xf3, 0xf3, 0xee, 0xc2, 0x7f, 0x3a, 0x53, 0x97, 0x63, 0xf3, 0x33, 0xaa, 0xa5, 0xd0, 0x82, 0xf9,
	0x0a, 0xe5, 0x4d, 0xc1, 0x51, 0x45, 0x11, 0x17, 0x65, 0x29, 0xaa, 0xb1, 0xfd, 0x3b, 0xc3, 0x4a,
	0x17, 0xfa, 0xd6, 0xba, 0xe2, 0x5f, 0x0e, 0x0c, 0x3e, 0xa3, 0xe6, 0x17, 0x29, 0x5e, 0x37, 0xa8,
	0x34, 0x8b, 0xc0, 0xe7, 0xa2, 0x52, 0x4d, 0x89, 0x32, 0x74, 0x86, 0x4e, 0x12, 0xa4, 0xf3, 0x9c,
	0x31, 0xe8, 0xea, 0xdb, 0x1a, 0xc3, 0xce, 0xd0, 0x4d, 0xbc, 0x94, 0x62, 0xb6, 0x0d, 0x1e, 0x17,
	0x4d, 0xa5, 0x43, 0x77, 0xe8, 0x24, 0x5e, 0x6a, 0x13, 0xb6, 0x03, 0x3d, 0xa5, 0x33, 0xdd, 0xa8,
	0xb0, 0x4b, 0xde, 0x59, 0x66, 0x2a, 0x54, 0xf8, 0x5d, 0x87, 0x1e, 0x99, 0x29, 0x36, 0x2b, 0xe6,
	0x98, 0xe5, 0x57, 0x45, 0x85, 0x61, 0x6f, 0xe8, 0x24, 0x6e, 0x3a, 0xcf, 0x59, 0x08, 0x7d, 0x89,
	0x5c, 0xdc, 0xa0, 0x0c, 0xfb, 0x43, 0x27, 0xf1, 0xd3, 0x36, 0x35, 0x95, 0x72, 0x54, 0x3c, 0xf4,
	0x49, 0xa6, 0x38, 0xfe, 0xd1, 0x01, 0x38, 0x29, 0xca, 0xfa, 0x0a, 0x4f, 0x33, 0x75, 0x69, 0x0a,
	0x17, 0xb9, 0x9d, 0xb6, 0x1d, 0xa5, 0xcd, 0x97, 0x46, 0x71, 0xe6, 0xa3, 0x98, 0xa6, 0x45, 0x23,
	0x39, 0xd2, 0x2c, 0x41, 0x3a, 0xcb, 0xee, 0x20, 0xe9, 0xde, 0x43, 0x12, 0x81, 0x5f, 0x4b, 0x91,
	0x37, 0x1c, 0x25, 0x0d, 0x15, 0xa4, 0xf3, 0x9c, 0xbd, 0x80, 0x4d, 0x2e, 0x31, 0xd3, 0x78, 0xa6,
	0x8b, 0xb2, 0x9d, 0x0d, 0xac, 0x74, 0x5a, 0x94, 0xc8, 0x5e, 0xc2, 0x56, 0x5b, 0xc8, 0x5a, 0xfa,
	0x64, 0x19, 0xb4, 0x22, 0x99, 0x96, 0xf1, 0xf8, 0xf7, 0xf0, 0x18, 0x08, 0x99, 0xce, 0xc2, 0x80,
	0x56, 0xa6, 0x78, 0x09, 0x3d, 0xd0, 0x6c, 0xb3, 0x2c, 0xfe, 0xdd, 0x81, 0xe0, 0x58, 0x4a, 0x21,
	0x89, 0xcd, 0xff, 0xe0, 0x2a, 0xbc, 0x26, 0x2c, 0x6e, 0x6a, 0xc2, 0x3b, 0xb4, 0x3a, 0x6b, 0x68,
	0xb9, 0x2b, 0x69, 0x75, 0xd7, 0xd2, 0xf2, 0x1e, 0xa0, 0xd5, 0x7b, 0x98, 0x56, 0xff, 0x71, 0x5a,
	0xfe, 0x23, 0xb4, 0x82, 0x35, 0xb4, 0x60, 0x25, 0xad, 0xcd, 0x65, 0x5a, 0xec, 0x39, 0x00, 0x1a,
	0x58, 0x67, 0x5c, 0xe4, 0x18, 0x0e, 0xe8, 0x59, 0x40, 0xca, 0x91, 0xc8, 0xa9, 0x17, 0xfb, 0xb8,
	0x44, 0xa5, 0xb2, 0x09, 0x86, 0x5b, 0xe4, 0x18, 0x90, 0xf8, 0xc5, 0x6a, 0xf1, 0x01, 0x6c, 0xcd,
	0x8e, 0x96, 0xaa, 0x45, 0xa5, 0x90, 0x25, 0xb3, 0x06, 0x9c, 0xa1, 0x9b, 0x6c, 0xee, 0x6d, 0x8f,
	0xda, 0x13, 0x3a, 0x5a, 0x6c, 0x5a, 0xdb, 0xd6, 0xde, 0x4f, 0x17, 0x76, 0x17, 0xe2, 0x11, 0x56,
	0x1a, 0xe5, 0x89, 0x75, 0xb3, 0x77, 0xd0, 0xb3, 0x54, 0xd8, 0xca, 0x0a, 0xd1, 0x4a, 0x35, 0xde,
	0x60, 0x1f, 0xc0, 0xfb, 0x66, 0xda, 0x61, 0x3b, 0x0b, 0xc3, 0xf2, 0xd1, 0x8f, 0x76, 0xff, 0xd2,
	0x6d, 0xdf, 0xf1, 0x06, 0x7b, 0x6f, 0x3e, 0xaa, 0xa9, 0xf5, 0x2f, 0xab, 0x1e, 0x0a, 0x71, 0x75,
	0x4c, 0x1b, 0x27, 0xde, 0x30, 0xdd, 0x36, 0x75, 0xfe, 0xf4, 0x6e, 0xf7, 0xc1, 0x23, 0x98, 0xec,
	0xd9, 0xc2, 0x30, 0xdf, 0xbe, 0xd1, 0x2a, 0x91, 0x5e, 0x72, 0x27, 0xa8, 0x9f, 0xb8, 0xd2, 0x5b,
	0xf0, 0x24, 0x2a, 0xd4, 0xab, 0x57, 0x5a, 0xf3, 0xd6, 0xe1, 0xa7, 0xaf, 0x1f, 0x27, 0x85, 0xbe,
	0x68, 0xce, 0x47, 0x5c, 0x94, 0xe3, 0xe9, 0x74, 0x7a, 0x21, 0xdf, 0x1c, 0x1c, 0xbc, 0x9e, 0x5d,
	0xb2, 0xaf, 0x26, 0xb2, 0xe6, 0xe3, 0x89, 0x18, 0xb7, 0x2f, 0xd3, 0xcd, 0xcc, 0xe9, 0x3b, 0x52,
	0x78, 0xde, 0xa3, 0xfb, 0x77, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x33, 0x21, 0xb3,
	0xb8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleTaskCenterServiceClient is the client API for SimpleTaskCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleTaskCenterServiceClient interface {
	Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// rpc delete(SimpleTask) returns (BoolEntity) {} // del
	Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error)
	// rpc list(ListRequest) returns (FetchResponse) {} // del
	Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error)
}

type simpleTaskCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleTaskCenterServiceClient(cc grpc.ClientConnInterface) SimpleTaskCenterServiceClient {
	return &simpleTaskCenterServiceClient{cc}
}

func (c *simpleTaskCenterServiceClient) Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error) {
	out := new(ErrorTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleTaskCenterServiceServer is the server API for SimpleTaskCenterService service.
type SimpleTaskCenterServiceServer interface {
	Create(context.Context, *SimpleTask) (*SimpleTask, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// rpc delete(SimpleTask) returns (BoolEntity) {} // del
	Complete(context.Context, *SimpleTask) (*common.BoolEntity, error)
	Update(context.Context, *SimpleTask) (*SimpleTask, error)
	Error(context.Context, *ErrorTask) (*ErrorTask, error)
	// rpc list(ListRequest) returns (FetchResponse) {} // del
	Get(context.Context, *SimpleTask) (*SimpleTask, error)
	Reset(context.Context, *ErrorTask) (*SimpleTask, error)
}

// UnimplementedSimpleTaskCenterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleTaskCenterServiceServer struct {
}

func (*UnimplementedSimpleTaskCenterServiceServer) Create(ctx context.Context, req *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Fetch(ctx context.Context, req *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Complete(ctx context.Context, req *SimpleTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Update(ctx context.Context, req *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Error(ctx context.Context, req *ErrorTask) (*ErrorTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Get(ctx context.Context, req *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSimpleTaskCenterServiceServer) Reset(ctx context.Context, req *ErrorTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterSimpleTaskCenterServiceServer(s *grpc.Server, srv SimpleTaskCenterServiceServer) {
	s.RegisterService(&_SimpleTaskCenterService_serviceDesc, srv)
}

func _SimpleTaskCenterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Create(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Complete(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Update(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Error(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Get(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Reset(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleTaskCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.SimpleTaskCenterService",
	HandlerType: (*SimpleTaskCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _SimpleTaskCenterService_Create_Handler,
		},
		{
			MethodName: "fetch",
			Handler:    _SimpleTaskCenterService_Fetch_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _SimpleTaskCenterService_Complete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SimpleTaskCenterService_Update_Handler,
		},
		{
			MethodName: "error",
			Handler:    _SimpleTaskCenterService_Error_Handler,
		},
		{
			MethodName: "get",
			Handler:    _SimpleTaskCenterService_Get_Handler,
		},
		{
			MethodName: "reset",
			Handler:    _SimpleTaskCenterService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task.proto",
}
