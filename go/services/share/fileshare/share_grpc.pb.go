// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fileshare

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileShareServiceClient is the client API for FileShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileShareServiceClient interface {
	Create(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*FileShare, error)
	Cancel(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*common.BoolEntity, error)
	GetOrEmpty(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*FileShare, error)
	Save(ctx context.Context, in *ShareSaveRequest, opts ...grpc.CallOption) (*FileShare, error)
}

type fileShareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileShareServiceClient(cc grpc.ClientConnInterface) FileShareServiceClient {
	return &fileShareServiceClient{cc}
}

func (c *fileShareServiceClient) Create(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*FileShare, error) {
	out := new(FileShare)
	err := c.cc.Invoke(ctx, "/services.FileShareService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileShareServiceClient) Cancel(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.FileShareService/cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileShareServiceClient) GetOrEmpty(ctx context.Context, in *FileShare, opts ...grpc.CallOption) (*FileShare, error) {
	out := new(FileShare)
	err := c.cc.Invoke(ctx, "/services.FileShareService/getOrEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileShareServiceClient) Save(ctx context.Context, in *ShareSaveRequest, opts ...grpc.CallOption) (*FileShare, error) {
	out := new(FileShare)
	err := c.cc.Invoke(ctx, "/services.FileShareService/save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileShareServiceServer is the server API for FileShareService service.
// All implementations must embed UnimplementedFileShareServiceServer
// for forward compatibility
type FileShareServiceServer interface {
	Create(context.Context, *FileShare) (*FileShare, error)
	Cancel(context.Context, *FileShare) (*common.BoolEntity, error)
	GetOrEmpty(context.Context, *FileShare) (*FileShare, error)
	Save(context.Context, *ShareSaveRequest) (*FileShare, error)
	mustEmbedUnimplementedFileShareServiceServer()
}

// UnimplementedFileShareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileShareServiceServer struct {
}

func (UnimplementedFileShareServiceServer) Create(context.Context, *FileShare) (*FileShare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileShareServiceServer) Cancel(context.Context, *FileShare) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedFileShareServiceServer) GetOrEmpty(context.Context, *FileShare) (*FileShare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrEmpty not implemented")
}
func (UnimplementedFileShareServiceServer) Save(context.Context, *ShareSaveRequest) (*FileShare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedFileShareServiceServer) mustEmbedUnimplementedFileShareServiceServer() {}

// UnsafeFileShareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileShareServiceServer will
// result in compilation errors.
type UnsafeFileShareServiceServer interface {
	mustEmbedUnimplementedFileShareServiceServer()
}

func RegisterFileShareServiceServer(s grpc.ServiceRegistrar, srv FileShareServiceServer) {
	s.RegisterService(&_FileShareService_serviceDesc, srv)
}

func _FileShareService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileShareServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileShareService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileShareServiceServer).Create(ctx, req.(*FileShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileShareService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileShareServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileShareService/cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileShareServiceServer).Cancel(ctx, req.(*FileShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileShareService_GetOrEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileShareServiceServer).GetOrEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileShareService/getOrEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileShareServiceServer).GetOrEmpty(ctx, req.(*FileShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileShareService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileShareServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileShareService/save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileShareServiceServer).Save(ctx, req.(*ShareSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileShareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.FileShareService",
	HandlerType: (*FileShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _FileShareService_Create_Handler,
		},
		{
			MethodName: "cancel",
			Handler:    _FileShareService_Cancel_Handler,
		},
		{
			MethodName: "getOrEmpty",
			Handler:    _FileShareService_GetOrEmpty_Handler,
		},
		{
			MethodName: "save",
			Handler:    _FileShareService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share/share.proto",
}
