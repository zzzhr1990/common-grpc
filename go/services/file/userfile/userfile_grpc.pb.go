// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userfile

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// Create create a file
	Create(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error)
	FlushStore(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error)
	UpdateCount(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error)
	// rpc CreateInternal (UserFile) returns (UserFile) {}
	Get(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error)
	UploadToken(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UploadTokenResponse, error)
	Rename(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error)
	// rpc ChangePathInternal (UserFile) returns (UserFile) {}
	Lock(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*common.BoolEntity, error)
	ReleaseLock(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Trash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	Delete(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	Copy(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	Move(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	Recover(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	// rpc Page (UserFilePageRequest) returns (UserFilePageResponse) {}
	List(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListResponse, error)
	ListInternal(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListResponse, error)
	// rpc PageTrash (CommonPageRequest) returns (TrashPageResponse) {}
	DeleteTrash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	ListTrash(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*TrashListResponse, error)
	GetTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*TrashInfo, error)
	ClearTrash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Create(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error) {
	out := new(UserFile)
	err := c.cc.Invoke(ctx, "/services.FileService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FlushStore(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error) {
	out := new(UserFile)
	err := c.cc.Invoke(ctx, "/services.FileService/FlushStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UpdateCount(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error) {
	out := new(UserFile)
	err := c.cc.Invoke(ctx, "/services.FileService/UpdateCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Get(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error) {
	out := new(UserFile)
	err := c.cc.Invoke(ctx, "/services.FileService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadToken(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UploadTokenResponse, error) {
	out := new(UploadTokenResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/UploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Rename(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*UserFile, error) {
	out := new(UserFile)
	err := c.cc.Invoke(ctx, "/services.FileService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Lock(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.FileService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReleaseLock(ctx context.Context, in *UserFile, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.FileService/ReleaseLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Trash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/Trash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Delete(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Copy(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Move(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Recover(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) List(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListResponse, error) {
	out := new(UserFileListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListInternal(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*UserFileListResponse, error) {
	out := new(UserFileListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/ListInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteTrash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/DeleteTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListTrash(ctx context.Context, in *UserFileListRequest, opts ...grpc.CallOption) (*TrashListResponse, error) {
	out := new(TrashListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/ListTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*TrashInfo, error) {
	out := new(TrashInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/GetTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ClearTrash(ctx context.Context, in *BathFileRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.FileService/ClearTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	// Create create a file
	Create(context.Context, *UserFile) (*UserFile, error)
	FlushStore(context.Context, *UserFile) (*UserFile, error)
	UpdateCount(context.Context, *UserFile) (*UserFile, error)
	// rpc CreateInternal (UserFile) returns (UserFile) {}
	Get(context.Context, *UserFile) (*UserFile, error)
	UploadToken(context.Context, *UserFile) (*UploadTokenResponse, error)
	Rename(context.Context, *UserFile) (*UserFile, error)
	// rpc ChangePathInternal (UserFile) returns (UserFile) {}
	Lock(context.Context, *UserFile) (*common.BoolEntity, error)
	ReleaseLock(context.Context, *UserFile) (*common.BoolEntity, error)
	Trash(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	Delete(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	Copy(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	Move(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	Recover(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	// rpc Page (UserFilePageRequest) returns (UserFilePageResponse) {}
	List(context.Context, *UserFileListRequest) (*UserFileListResponse, error)
	ListInternal(context.Context, *UserFileListRequest) (*UserFileListResponse, error)
	// rpc PageTrash (CommonPageRequest) returns (TrashPageResponse) {}
	DeleteTrash(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	ListTrash(context.Context, *UserFileListRequest) (*TrashListResponse, error)
	GetTrash(context.Context, *TrashInfo) (*TrashInfo, error)
	ClearTrash(context.Context, *BathFileRequest) (*common.Int64Entity, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Create(context.Context, *UserFile) (*UserFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileServiceServer) FlushStore(context.Context, *UserFile) (*UserFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushStore not implemented")
}
func (UnimplementedFileServiceServer) UpdateCount(context.Context, *UserFile) (*UserFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCount not implemented")
}
func (UnimplementedFileServiceServer) Get(context.Context, *UserFile) (*UserFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFileServiceServer) UploadToken(context.Context, *UserFile) (*UploadTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadToken not implemented")
}
func (UnimplementedFileServiceServer) Rename(context.Context, *UserFile) (*UserFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileServiceServer) Lock(context.Context, *UserFile) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedFileServiceServer) ReleaseLock(context.Context, *UserFile) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedFileServiceServer) Trash(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trash not implemented")
}
func (UnimplementedFileServiceServer) Delete(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileServiceServer) Copy(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFileServiceServer) Move(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFileServiceServer) Recover(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedFileServiceServer) List(context.Context, *UserFileListRequest) (*UserFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileServiceServer) ListInternal(context.Context, *UserFileListRequest) (*UserFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternal not implemented")
}
func (UnimplementedFileServiceServer) DeleteTrash(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrash not implemented")
}
func (UnimplementedFileServiceServer) ListTrash(context.Context, *UserFileListRequest) (*TrashListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrash not implemented")
}
func (UnimplementedFileServiceServer) GetTrash(context.Context, *TrashInfo) (*TrashInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrash not implemented")
}
func (UnimplementedFileServiceServer) ClearTrash(context.Context, *BathFileRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTrash not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Create(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FlushStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FlushStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/FlushStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FlushStore(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UpdateCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UpdateCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/UpdateCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UpdateCount(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Get(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/UploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadToken(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Rename(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Lock(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ReleaseLock(ctx, req.(*UserFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Trash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Trash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Trash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Trash(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Delete(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Copy(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Move(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Recover(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).List(ctx, req.(*UserFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ListInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListInternal(ctx, req.(*UserFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/DeleteTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteTrash(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ListTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListTrash(ctx, req.(*UserFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/GetTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetTrash(ctx, req.(*TrashInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ClearTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ClearTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ClearTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ClearTrash(ctx, req.(*BathFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FileService_Create_Handler,
		},
		{
			MethodName: "FlushStore",
			Handler:    _FileService_FlushStore_Handler,
		},
		{
			MethodName: "UpdateCount",
			Handler:    _FileService_UpdateCount_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FileService_Get_Handler,
		},
		{
			MethodName: "UploadToken",
			Handler:    _FileService_UploadToken_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileService_Rename_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _FileService_Lock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _FileService_ReleaseLock_Handler,
		},
		{
			MethodName: "Trash",
			Handler:    _FileService_Trash_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileService_Delete_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FileService_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FileService_Move_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _FileService_Recover_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FileService_List_Handler,
		},
		{
			MethodName: "ListInternal",
			Handler:    _FileService_ListInternal_Handler,
		},
		{
			MethodName: "DeleteTrash",
			Handler:    _FileService_DeleteTrash_Handler,
		},
		{
			MethodName: "ListTrash",
			Handler:    _FileService_ListTrash_Handler,
		},
		{
			MethodName: "GetTrash",
			Handler:    _FileService_GetTrash_Handler,
		},
		{
			MethodName: "ClearTrash",
			Handler:    _FileService_ClearTrash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/userfile.proto",
}
