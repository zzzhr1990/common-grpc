// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sysinfo

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemInfoServiceClient is the client API for SystemInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemInfoServiceClient interface {
	Info(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SystemInfo, error)
	Address(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*AddressInfo, error)
	EarseSensitiveAddress(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*common.StringListEntity, error)
	ListUpdate(ctx context.Context, in *UpdateInfo, opts ...grpc.CallOption) (*UpdateInfoList, error)
	GetApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*AppInfo, error)
	CommonRateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResult, error)
}

type systemInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemInfoServiceClient(cc grpc.ClientConnInterface) SystemInfoServiceClient {
	return &systemInfoServiceClient{cc}
}

func (c *systemInfoServiceClient) Info(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SystemInfo, error) {
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) Address(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*AddressInfo, error) {
	out := new(AddressInfo)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) EarseSensitiveAddress(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*common.StringListEntity, error) {
	out := new(common.StringListEntity)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/EarseSensitiveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) ListUpdate(ctx context.Context, in *UpdateInfo, opts ...grpc.CallOption) (*UpdateInfoList, error) {
	out := new(UpdateInfoList)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/ListUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) GetApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) CommonRateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResult, error) {
	out := new(RateLimitResult)
	err := c.cc.Invoke(ctx, "/services.SystemInfoService/CommonRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemInfoServiceServer is the server API for SystemInfoService service.
// All implementations must embed UnimplementedSystemInfoServiceServer
// for forward compatibility
type SystemInfoServiceServer interface {
	Info(context.Context, *ClientInfo) (*SystemInfo, error)
	Address(context.Context, *ClientInfo) (*AddressInfo, error)
	EarseSensitiveAddress(context.Context, *common.StringListEntity) (*common.StringListEntity, error)
	ListUpdate(context.Context, *UpdateInfo) (*UpdateInfoList, error)
	GetApp(context.Context, *AppInfo) (*AppInfo, error)
	CommonRateLimit(context.Context, *RateLimitRequest) (*RateLimitResult, error)
	mustEmbedUnimplementedSystemInfoServiceServer()
}

// UnimplementedSystemInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemInfoServiceServer struct {
}

func (UnimplementedSystemInfoServiceServer) Info(context.Context, *ClientInfo) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedSystemInfoServiceServer) Address(context.Context, *ClientInfo) (*AddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedSystemInfoServiceServer) EarseSensitiveAddress(context.Context, *common.StringListEntity) (*common.StringListEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarseSensitiveAddress not implemented")
}
func (UnimplementedSystemInfoServiceServer) ListUpdate(context.Context, *UpdateInfo) (*UpdateInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUpdate not implemented")
}
func (UnimplementedSystemInfoServiceServer) GetApp(context.Context, *AppInfo) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedSystemInfoServiceServer) CommonRateLimit(context.Context, *RateLimitRequest) (*RateLimitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonRateLimit not implemented")
}
func (UnimplementedSystemInfoServiceServer) mustEmbedUnimplementedSystemInfoServiceServer() {}

// UnsafeSystemInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemInfoServiceServer will
// result in compilation errors.
type UnsafeSystemInfoServiceServer interface {
	mustEmbedUnimplementedSystemInfoServiceServer()
}

func RegisterSystemInfoServiceServer(s grpc.ServiceRegistrar, srv SystemInfoServiceServer) {
	s.RegisterService(&SystemInfoService_ServiceDesc, srv)
}

func _SystemInfoService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).Info(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).Address(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_EarseSensitiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringListEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).EarseSensitiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/EarseSensitiveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).EarseSensitiveAddress(ctx, req.(*common.StringListEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_ListUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).ListUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/ListUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).ListUpdate(ctx, req.(*UpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).GetApp(ctx, req.(*AppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_CommonRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).CommonRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemInfoService/CommonRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).CommonRateLimit(ctx, req.(*RateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemInfoService_ServiceDesc is the grpc.ServiceDesc for SystemInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.SystemInfoService",
	HandlerType: (*SystemInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _SystemInfoService_Info_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _SystemInfoService_Address_Handler,
		},
		{
			MethodName: "EarseSensitiveAddress",
			Handler:    _SystemInfoService_EarseSensitiveAddress_Handler,
		},
		{
			MethodName: "ListUpdate",
			Handler:    _SystemInfoService_ListUpdate_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _SystemInfoService_GetApp_Handler,
		},
		{
			MethodName: "CommonRateLimit",
			Handler:    _SystemInfoService_CommonRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/system.proto",
}
