// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package thirdpartystore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdPartyStoreServiceClient is the client API for ThirdPartyStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyStoreServiceClient interface {
	Create(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error)
	Update(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error)
}

type thirdPartyStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyStoreServiceClient(cc grpc.ClientConnInterface) ThirdPartyStoreServiceClient {
	return &thirdPartyStoreServiceClient{cc}
}

func (c *thirdPartyStoreServiceClient) Create(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error) {
	out := new(ThirdPartyStore)
	err := c.cc.Invoke(ctx, "/services.ThirdPartyStoreService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyStoreServiceClient) Get(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error) {
	out := new(ThirdPartyStore)
	err := c.cc.Invoke(ctx, "/services.ThirdPartyStoreService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyStoreServiceClient) Update(ctx context.Context, in *ThirdPartyStore, opts ...grpc.CallOption) (*ThirdPartyStore, error) {
	out := new(ThirdPartyStore)
	err := c.cc.Invoke(ctx, "/services.ThirdPartyStoreService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyStoreServiceServer is the server API for ThirdPartyStoreService service.
// All implementations must embed UnimplementedThirdPartyStoreServiceServer
// for forward compatibility
type ThirdPartyStoreServiceServer interface {
	Create(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error)
	Update(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error)
	mustEmbedUnimplementedThirdPartyStoreServiceServer()
}

// UnimplementedThirdPartyStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThirdPartyStoreServiceServer struct {
}

func (UnimplementedThirdPartyStoreServiceServer) Create(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedThirdPartyStoreServiceServer) Get(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedThirdPartyStoreServiceServer) Update(context.Context, *ThirdPartyStore) (*ThirdPartyStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedThirdPartyStoreServiceServer) mustEmbedUnimplementedThirdPartyStoreServiceServer() {
}

// UnsafeThirdPartyStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyStoreServiceServer will
// result in compilation errors.
type UnsafeThirdPartyStoreServiceServer interface {
	mustEmbedUnimplementedThirdPartyStoreServiceServer()
}

func RegisterThirdPartyStoreServiceServer(s grpc.ServiceRegistrar, srv ThirdPartyStoreServiceServer) {
	s.RegisterService(&ThirdPartyStoreService_ServiceDesc, srv)
}

func _ThirdPartyStoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyStoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ThirdPartyStoreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyStoreServiceServer).Create(ctx, req.(*ThirdPartyStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ThirdPartyStoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyStoreServiceServer).Get(ctx, req.(*ThirdPartyStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyStoreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartyStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyStoreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ThirdPartyStoreService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyStoreServiceServer).Update(ctx, req.(*ThirdPartyStore))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdPartyStoreService_ServiceDesc is the grpc.ServiceDesc for ThirdPartyStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdPartyStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ThirdPartyStoreService",
	HandlerType: (*ThirdPartyStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ThirdPartyStoreService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ThirdPartyStoreService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ThirdPartyStoreService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/thirdpartystore.proto",
}
