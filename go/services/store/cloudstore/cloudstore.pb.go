// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store/cloudstore.proto

package cloudstore

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CloudStore struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Size                 uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mime                 string   `protobuf:"bytes,3,opt,name=mime,proto3" json:"mime,omitempty"`
	UploadUser           int64    `protobuf:"varint,4,opt,name=uploadUser,proto3" json:"uploadUser,omitempty"`
	Ctime                int64    `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	OriginalaFilename    string   `protobuf:"bytes,6,opt,name=originalaFilename,proto3" json:"originalaFilename,omitempty"`
	Store                int32    `protobuf:"varint,7,opt,name=store,proto3" json:"store,omitempty"`
	Bucket               string   `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Key                  string   `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`
	Type                 int32    `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	Preview              bool     `protobuf:"varint,11,opt,name=preview,proto3" json:"preview,omitempty"`
	PreviewType          int32    `protobuf:"varint,12,opt,name=previewType,proto3" json:"previewType,omitempty"`
	Flag                 int32    `protobuf:"varint,13,opt,name=flag,proto3" json:"flag,omitempty"`
	DownloadAddress      string   `protobuf:"bytes,14,opt,name=downloadAddress,proto3" json:"downloadAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudStore) Reset()         { *m = CloudStore{} }
func (m *CloudStore) String() string { return proto.CompactTextString(m) }
func (*CloudStore) ProtoMessage()    {}
func (*CloudStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_e406880dd1e5ea92, []int{0}
}

func (m *CloudStore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStore.Unmarshal(m, b)
}
func (m *CloudStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStore.Marshal(b, m, deterministic)
}
func (m *CloudStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStore.Merge(m, src)
}
func (m *CloudStore) XXX_Size() int {
	return xxx_messageInfo_CloudStore.Size(m)
}
func (m *CloudStore) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStore.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStore proto.InternalMessageInfo

func (m *CloudStore) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CloudStore) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CloudStore) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *CloudStore) GetUploadUser() int64 {
	if m != nil {
		return m.UploadUser
	}
	return 0
}

func (m *CloudStore) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *CloudStore) GetOriginalaFilename() string {
	if m != nil {
		return m.OriginalaFilename
	}
	return ""
}

func (m *CloudStore) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *CloudStore) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *CloudStore) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CloudStore) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CloudStore) GetPreview() bool {
	if m != nil {
		return m.Preview
	}
	return false
}

func (m *CloudStore) GetPreviewType() int32 {
	if m != nil {
		return m.PreviewType
	}
	return 0
}

func (m *CloudStore) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *CloudStore) GetDownloadAddress() string {
	if m != nil {
		return m.DownloadAddress
	}
	return ""
}

type CloudStoreList struct {
	Data                 []*CloudStore `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CloudStoreList) Reset()         { *m = CloudStoreList{} }
func (m *CloudStoreList) String() string { return proto.CompactTextString(m) }
func (*CloudStoreList) ProtoMessage()    {}
func (*CloudStoreList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e406880dd1e5ea92, []int{1}
}

func (m *CloudStoreList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudStoreList.Unmarshal(m, b)
}
func (m *CloudStoreList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudStoreList.Marshal(b, m, deterministic)
}
func (m *CloudStoreList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudStoreList.Merge(m, src)
}
func (m *CloudStoreList) XXX_Size() int {
	return xxx_messageInfo_CloudStoreList.Size(m)
}
func (m *CloudStoreList) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudStoreList.DiscardUnknown(m)
}

var xxx_messageInfo_CloudStoreList proto.InternalMessageInfo

func (m *CloudStoreList) GetData() []*CloudStore {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CloudStore)(nil), "services.CloudStore")
	proto.RegisterType((*CloudStoreList)(nil), "services.CloudStoreList")
}

func init() { proto.RegisterFile("store/cloudstore.proto", fileDescriptor_e406880dd1e5ea92) }

var fileDescriptor_e406880dd1e5ea92 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x8d, 0x9b, 0x3f, 0x4d, 0x26, 0xbf, 0x5f, 0xa0, 0xab, 0x2a, 0xac, 0x72, 0x40, 0x56, 0x4e,
	0x3e, 0x40, 0x0c, 0xad, 0x84, 0x94, 0x4a, 0x08, 0x68, 0x28, 0x14, 0x81, 0x84, 0xe4, 0xc0, 0x85,
	0x0b, 0xda, 0xd8, 0xc3, 0x7a, 0x55, 0xdb, 0x6b, 0xad, 0x37, 0xad, 0x9c, 0xef, 0xc8, 0x17, 0xe2,
	0x84, 0x76, 0xed, 0x28, 0x25, 0xa4, 0x48, 0xe9, 0x29, 0x6f, 0xde, 0xbe, 0x37, 0x79, 0x63, 0x7b,
	0x07, 0x86, 0x85, 0x96, 0x0a, 0xfd, 0x30, 0x91, 0xcb, 0xc8, 0xc2, 0x49, 0xae, 0xa4, 0x96, 0xa4,
	0x5b, 0xa0, 0xba, 0x16, 0x21, 0x16, 0xa3, 0x51, 0x28, 0xd3, 0x54, 0x66, 0x7e, 0xf5, 0xf3, 0x1d,
	0x33, 0x2d, 0x74, 0x59, 0xa9, 0xc6, 0xbf, 0x0e, 0x00, 0x66, 0xc6, 0x3a, 0x37, 0x56, 0x42, 0xa0,
	0x15, 0xb3, 0x22, 0xa6, 0x8e, 0xeb, 0x78, 0xbd, 0xc0, 0x62, 0xc3, 0x15, 0x62, 0x85, 0xf4, 0xc0,
	0x75, 0xbc, 0x56, 0x60, 0xb1, 0xe1, 0x52, 0x91, 0x22, 0x6d, 0x56, 0x3a, 0x83, 0xc9, 0x63, 0x80,
	0x65, 0x9e, 0x48, 0x16, 0x7d, 0x2d, 0x50, 0xd1, 0x96, 0xeb, 0x78, 0xcd, 0xe0, 0x16, 0x43, 0x8e,
	0xa1, 0x1d, 0x6a, 0x63, 0x6a, 0xdb, 0xa3, 0xaa, 0x20, 0x4f, 0xe0, 0x48, 0x2a, 0xc1, 0x45, 0xc6,
	0x12, 0xf6, 0x4e, 0x24, 0x98, 0xb1, 0x14, 0x69, 0xc7, 0xb6, 0xfd, 0xfb, 0xc0, 0xf4, 0xb0, 0x33,
	0xd2, 0x43, 0xd7, 0xf1, 0xda, 0x41, 0x55, 0x90, 0x21, 0x74, 0x16, 0xcb, 0xf0, 0x0a, 0x35, 0xed,
	0x5a, 0x63, 0x5d, 0x91, 0x87, 0xd0, 0xbc, 0xc2, 0x92, 0xf6, 0x2c, 0x69, 0xa0, 0xc9, 0xad, 0xcb,
	0x1c, 0x29, 0x58, 0xbb, 0xc5, 0x84, 0xc2, 0x61, 0xae, 0xf0, 0x5a, 0xe0, 0x0d, 0xed, 0xbb, 0x8e,
	0xd7, 0x0d, 0xd6, 0x25, 0x71, 0xa1, 0x5f, 0xc3, 0x2f, 0xc6, 0xf4, 0x9f, 0x35, 0xdd, 0xa6, 0x4c,
	0xbf, 0x1f, 0x09, 0xe3, 0xf4, 0xff, 0xaa, 0x9f, 0xc1, 0xc4, 0x83, 0x07, 0x91, 0xbc, 0xc9, 0xcc,
	0xdc, 0x6f, 0xa2, 0x48, 0x61, 0x51, 0xd0, 0x81, 0x4d, 0xb0, 0x4d, 0x8f, 0xcf, 0x60, 0xb0, 0x79,
	0xf6, 0x9f, 0x44, 0xa1, 0x89, 0x07, 0xad, 0x88, 0x69, 0x46, 0x1d, 0xb7, 0xe9, 0xf5, 0x4f, 0x8e,
	0x27, 0xeb, 0x77, 0x38, 0xd9, 0xe8, 0x02, 0xab, 0x38, 0xf9, 0xd9, 0x82, 0xa3, 0x0d, 0x39, 0xaf,
	0x74, 0xe4, 0x05, 0x74, 0x42, 0x85, 0x4c, 0x23, 0xd9, 0xe9, 0x1d, 0xed, 0x64, 0xc7, 0x0d, 0x32,
	0x85, 0x9e, 0x56, 0xe5, 0xec, 0x3e, 0xd6, 0x19, 0xf4, 0x17, 0x4c, 0x87, 0x71, 0x6d, 0xa6, 0xbb,
	0x64, 0x66, 0xb6, 0xd1, 0x9d, 0x27, 0xe3, 0x06, 0x39, 0x85, 0x26, 0x47, 0xbd, 0xe7, 0x3f, 0x9b,
	0x61, 0x63, 0x96, 0xf1, 0x7d, 0x13, 0xbf, 0x86, 0xae, 0x4d, 0xfc, 0x1e, 0xf5, 0x3d, 0xe3, 0x5e,
	0xc2, 0x60, 0xdd, 0xe1, 0xbc, 0xbc, 0x34, 0x97, 0x64, 0xb4, 0x51, 0xcf, 0xb5, 0x12, 0x19, 0x37,
	0xca, 0x0b, 0x7b, 0xd3, 0xfe, 0xd9, 0xe9, 0x0c, 0x80, 0xa3, 0xfe, 0xac, 0x2e, 0xd2, 0x5c, 0x97,
	0x7b, 0xce, 0xf1, 0x11, 0x1e, 0x71, 0xd4, 0x1f, 0xb2, 0x0c, 0xd5, 0xdb, 0x3f, 0xbf, 0x2c, 0x32,
	0xdc, 0x8e, 0x53, 0x47, 0xb9, 0x83, 0x1f, 0x37, 0xce, 0x5f, 0x7d, 0x7b, 0xc9, 0x85, 0x8e, 0x97,
	0x8b, 0x49, 0x28, 0x53, 0x7f, 0xb5, 0x5a, 0xc5, 0xea, 0xf9, 0x74, 0xfa, 0xac, 0x5e, 0x1a, 0x4f,
	0xb9, 0xca, 0x43, 0x9f, 0x4b, 0x7f, 0x6d, 0xf7, 0xb7, 0xb7, 0xce, 0xa2, 0x63, 0x17, 0xca, 0xe9,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x77, 0x79, 0x34, 0x90, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudStoreServiceClient is the client API for CloudStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudStoreServiceClient interface {
	Create(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error)
	TryCreate(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error)
	BatchCreate(ctx context.Context, in *CloudStoreList, opts ...grpc.CallOption) (*CloudStoreList, error)
	Get(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error)
	Change(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error)
	BatchGet(ctx context.Context, in *CloudStoreList, opts ...grpc.CallOption) (*CloudStoreList, error)
	BatchGetByHash(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*CloudStoreList, error)
	GetOrEmpty(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error)
	GetInnerDownloadAddress(ctx context.Context, in *common.StringEntity, opts ...grpc.CallOption) (*common.StringEntity, error)
}

type cloudStoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewCloudStoreServiceClient(cc *grpc.ClientConn) CloudStoreServiceClient {
	return &cloudStoreServiceClient{cc}
}

func (c *cloudStoreServiceClient) Create(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error) {
	out := new(CloudStore)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) TryCreate(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error) {
	out := new(CloudStore)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/tryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) BatchCreate(ctx context.Context, in *CloudStoreList, opts ...grpc.CallOption) (*CloudStoreList, error) {
	out := new(CloudStoreList)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/batchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) Get(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error) {
	out := new(CloudStore)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) Change(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error) {
	out := new(CloudStore)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) BatchGet(ctx context.Context, in *CloudStoreList, opts ...grpc.CallOption) (*CloudStoreList, error) {
	out := new(CloudStoreList)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/batchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) BatchGetByHash(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*CloudStoreList, error) {
	out := new(CloudStoreList)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/batchGetByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) GetOrEmpty(ctx context.Context, in *CloudStore, opts ...grpc.CallOption) (*CloudStore, error) {
	out := new(CloudStore)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/getOrEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStoreServiceClient) GetInnerDownloadAddress(ctx context.Context, in *common.StringEntity, opts ...grpc.CallOption) (*common.StringEntity, error) {
	out := new(common.StringEntity)
	err := c.cc.Invoke(ctx, "/services.CloudStoreService/getInnerDownloadAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudStoreServiceServer is the server API for CloudStoreService service.
type CloudStoreServiceServer interface {
	Create(context.Context, *CloudStore) (*CloudStore, error)
	TryCreate(context.Context, *CloudStore) (*CloudStore, error)
	BatchCreate(context.Context, *CloudStoreList) (*CloudStoreList, error)
	Get(context.Context, *CloudStore) (*CloudStore, error)
	Change(context.Context, *CloudStore) (*CloudStore, error)
	BatchGet(context.Context, *CloudStoreList) (*CloudStoreList, error)
	BatchGetByHash(context.Context, *common.StringListEntity) (*CloudStoreList, error)
	GetOrEmpty(context.Context, *CloudStore) (*CloudStore, error)
	GetInnerDownloadAddress(context.Context, *common.StringEntity) (*common.StringEntity, error)
}

// UnimplementedCloudStoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudStoreServiceServer struct {
}

func (*UnimplementedCloudStoreServiceServer) Create(ctx context.Context, req *CloudStore) (*CloudStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCloudStoreServiceServer) TryCreate(ctx context.Context, req *CloudStore) (*CloudStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryCreate not implemented")
}
func (*UnimplementedCloudStoreServiceServer) BatchCreate(ctx context.Context, req *CloudStoreList) (*CloudStoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (*UnimplementedCloudStoreServiceServer) Get(ctx context.Context, req *CloudStore) (*CloudStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCloudStoreServiceServer) Change(ctx context.Context, req *CloudStore) (*CloudStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (*UnimplementedCloudStoreServiceServer) BatchGet(ctx context.Context, req *CloudStoreList) (*CloudStoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGet not implemented")
}
func (*UnimplementedCloudStoreServiceServer) BatchGetByHash(ctx context.Context, req *common.StringListEntity) (*CloudStoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetByHash not implemented")
}
func (*UnimplementedCloudStoreServiceServer) GetOrEmpty(ctx context.Context, req *CloudStore) (*CloudStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrEmpty not implemented")
}
func (*UnimplementedCloudStoreServiceServer) GetInnerDownloadAddress(ctx context.Context, req *common.StringEntity) (*common.StringEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInnerDownloadAddress not implemented")
}

func RegisterCloudStoreServiceServer(s *grpc.Server, srv CloudStoreServiceServer) {
	s.RegisterService(&_CloudStoreService_serviceDesc, srv)
}

func _CloudStoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).Create(ctx, req.(*CloudStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_TryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).TryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/TryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).TryCreate(ctx, req.(*CloudStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStoreList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).BatchCreate(ctx, req.(*CloudStoreList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).Get(ctx, req.(*CloudStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).Change(ctx, req.(*CloudStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStoreList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).BatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/BatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).BatchGet(ctx, req.(*CloudStoreList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_BatchGetByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringListEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).BatchGetByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/BatchGetByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).BatchGetByHash(ctx, req.(*common.StringListEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_GetOrEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).GetOrEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/GetOrEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).GetOrEmpty(ctx, req.(*CloudStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStoreService_GetInnerDownloadAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStoreServiceServer).GetInnerDownloadAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.CloudStoreService/GetInnerDownloadAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStoreServiceServer).GetInnerDownloadAddress(ctx, req.(*common.StringEntity))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.CloudStoreService",
	HandlerType: (*CloudStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CloudStoreService_Create_Handler,
		},
		{
			MethodName: "tryCreate",
			Handler:    _CloudStoreService_TryCreate_Handler,
		},
		{
			MethodName: "batchCreate",
			Handler:    _CloudStoreService_BatchCreate_Handler,
		},
		{
			MethodName: "get",
			Handler:    _CloudStoreService_Get_Handler,
		},
		{
			MethodName: "change",
			Handler:    _CloudStoreService_Change_Handler,
		},
		{
			MethodName: "batchGet",
			Handler:    _CloudStoreService_BatchGet_Handler,
		},
		{
			MethodName: "batchGetByHash",
			Handler:    _CloudStoreService_BatchGetByHash_Handler,
		},
		{
			MethodName: "getOrEmpty",
			Handler:    _CloudStoreService_GetOrEmpty_Handler,
		},
		{
			MethodName: "getInnerDownloadAddress",
			Handler:    _CloudStoreService_GetInnerDownloadAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/cloudstore.proto",
}
