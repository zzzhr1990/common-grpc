// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subtitle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubtitleServiceClient is the client API for SubtitleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtitleServiceClient interface {
	Create(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
	GetList(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*SubtitleListResponse, error)
	Update(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
}

type subtitleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleServiceClient(cc grpc.ClientConnInterface) SubtitleServiceClient {
	return &subtitleServiceClient{cc}
}

func (c *subtitleServiceClient) Create(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) Get(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) GetList(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*SubtitleListResponse, error) {
	out := new(SubtitleListResponse)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) Update(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleServiceServer is the server API for SubtitleService service.
// All implementations must embed UnimplementedSubtitleServiceServer
// for forward compatibility
type SubtitleServiceServer interface {
	Create(context.Context, *Subtitle) (*Subtitle, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(context.Context, *Subtitle) (*Subtitle, error)
	GetList(context.Context, *Subtitle) (*SubtitleListResponse, error)
	Update(context.Context, *Subtitle) (*Subtitle, error)
	mustEmbedUnimplementedSubtitleServiceServer()
}

// UnimplementedSubtitleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubtitleServiceServer struct {
}

func (UnimplementedSubtitleServiceServer) Create(context.Context, *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubtitleServiceServer) Get(context.Context, *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubtitleServiceServer) GetList(context.Context, *Subtitle) (*SubtitleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSubtitleServiceServer) Update(context.Context, *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubtitleServiceServer) mustEmbedUnimplementedSubtitleServiceServer() {}

// UnsafeSubtitleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtitleServiceServer will
// result in compilation errors.
type UnsafeSubtitleServiceServer interface {
	mustEmbedUnimplementedSubtitleServiceServer()
}

func RegisterSubtitleServiceServer(s grpc.ServiceRegistrar, srv SubtitleServiceServer) {
	s.RegisterService(&_SubtitleService_serviceDesc, srv)
}

func _SubtitleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Create(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Get(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).GetList(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Update(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubtitleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.SubtitleService",
	HandlerType: (*SubtitleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubtitleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubtitleService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SubtitleService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubtitleService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/subtitle.proto",
}
