// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store/subtitle.proto

package subtitle

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Subtitle struct {
	Identity             string   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Index                int32    `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Language             string   `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	HandlerName          string   `protobuf:"bytes,7,opt,name=handler_name,json=handlerName,proto3" json:"handler_name,omitempty"`
	CodecName            string   `protobuf:"bytes,8,opt,name=codec_name,json=codecName,proto3" json:"codec_name,omitempty"`
	CreateTime           int64    `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           int64    `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Key                  string   `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subtitle) Reset()         { *m = Subtitle{} }
func (m *Subtitle) String() string { return proto.CompactTextString(m) }
func (*Subtitle) ProtoMessage()    {}
func (*Subtitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_f637d18a6af9ce42, []int{0}
}

func (m *Subtitle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subtitle.Unmarshal(m, b)
}
func (m *Subtitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subtitle.Marshal(b, m, deterministic)
}
func (m *Subtitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subtitle.Merge(m, src)
}
func (m *Subtitle) XXX_Size() int {
	return xxx_messageInfo_Subtitle.Size(m)
}
func (m *Subtitle) XXX_DiscardUnknown() {
	xxx_messageInfo_Subtitle.DiscardUnknown(m)
}

var xxx_messageInfo_Subtitle proto.InternalMessageInfo

func (m *Subtitle) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Subtitle) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Subtitle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Subtitle) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Subtitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Subtitle) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Subtitle) GetHandlerName() string {
	if m != nil {
		return m.HandlerName
	}
	return ""
}

func (m *Subtitle) GetCodecName() string {
	if m != nil {
		return m.CodecName
	}
	return ""
}

func (m *Subtitle) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Subtitle) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Subtitle) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SubtitleListResponse struct {
	Hash                 string      `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Data                 []*Subtitle `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubtitleListResponse) Reset()         { *m = SubtitleListResponse{} }
func (m *SubtitleListResponse) String() string { return proto.CompactTextString(m) }
func (*SubtitleListResponse) ProtoMessage()    {}
func (*SubtitleListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f637d18a6af9ce42, []int{1}
}

func (m *SubtitleListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubtitleListResponse.Unmarshal(m, b)
}
func (m *SubtitleListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubtitleListResponse.Marshal(b, m, deterministic)
}
func (m *SubtitleListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubtitleListResponse.Merge(m, src)
}
func (m *SubtitleListResponse) XXX_Size() int {
	return xxx_messageInfo_SubtitleListResponse.Size(m)
}
func (m *SubtitleListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubtitleListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubtitleListResponse proto.InternalMessageInfo

func (m *SubtitleListResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SubtitleListResponse) GetData() []*Subtitle {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Subtitle)(nil), "services.Subtitle")
	proto.RegisterType((*SubtitleListResponse)(nil), "services.SubtitleListResponse")
}

func init() {
	proto.RegisterFile("store/subtitle.proto", fileDescriptor_f637d18a6af9ce42)
}

var fileDescriptor_f637d18a6af9ce42 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0xaf, 0x93, 0x40,
	0x10, 0xc7, 0x1f, 0xa5, 0xf4, 0xd1, 0xc1, 0x44, 0xb3, 0xe9, 0x61, 0xf3, 0x12, 0x15, 0x39, 0x18,
	0x2e, 0x82, 0xd6, 0xd3, 0x8b, 0x31, 0x26, 0x7a, 0xe8, 0xc5, 0x78, 0xa0, 0x7a, 0xf1, 0xd2, 0x6c,
	0x61, 0x02, 0x1b, 0x0b, 0x4b, 0xd8, 0xc5, 0xd8, 0x7e, 0x26, 0xbf, 0x99, 0x5f, 0xc2, 0x30, 0x5b,
	0x48, 0x8d, 0x3d, 0xe8, 0x6d, 0xe6, 0x37, 0xff, 0xff, 0xce, 0xee, 0x3f, 0x0b, 0x2b, 0x6d, 0x54,
	0x87, 0xa9, 0xee, 0xf7, 0x46, 0x9a, 0x03, 0x26, 0x6d, 0xa7, 0x8c, 0x62, 0xbe, 0xc6, 0xee, 0xbb,
	0xcc, 0x51, 0x47, 0x3f, 0x67, 0xe0, 0x6f, 0xcf, 0x43, 0x76, 0x07, 0xbe, 0x2c, 0xb0, 0x31, 0xd2,
	0x1c, 0xb9, 0x13, 0x3a, 0xf1, 0x32, 0x9b, 0x7a, 0xc6, 0x60, 0x5e, 0x09, 0x5d, 0xf1, 0x19, 0x71,
	0xaa, 0x07, 0x66, 0x8e, 0x2d, 0x72, 0x37, 0x74, 0x62, 0x2f, 0xa3, 0x9a, 0xad, 0xc0, 0x93, 0x4d,
	0x81, 0x3f, 0xf8, 0x9c, 0xa0, 0x6d, 0x06, 0x4a, 0x2b, 0xb8, 0x47, 0x76, 0x6f, 0xda, 0x77, 0x10,
	0x4d, 0xd9, 0x8b, 0x12, 0xf9, 0xc2, 0xee, 0x1b, 0x7b, 0xf6, 0x0c, 0x1e, 0x54, 0xa2, 0x29, 0x0e,
	0xd8, 0xed, 0x1a, 0x51, 0x23, 0xbf, 0xa5, 0x79, 0x70, 0x66, 0x9f, 0x44, 0x8d, 0xec, 0x31, 0x40,
	0xae, 0x0a, 0xcc, 0xad, 0xc0, 0x27, 0xc1, 0x92, 0x08, 0x8d, 0x9f, 0x42, 0x90, 0x77, 0x28, 0x0c,
	0xee, 0x8c, 0xac, 0x91, 0x2f, 0x43, 0x27, 0x76, 0x33, 0xb0, 0xe8, 0xb3, 0xb4, 0x82, 0xbe, 0x2d,
	0x26, 0x01, 0x58, 0x81, 0x45, 0x24, 0x78, 0x04, 0xee, 0x37, 0x3c, 0xf2, 0x80, 0x4e, 0x1e, 0xca,
	0x28, 0x83, 0xd5, 0x98, 0xd6, 0x47, 0xa9, 0x4d, 0x86, 0xba, 0x55, 0x8d, 0xc6, 0x29, 0x1d, 0xe7,
	0x22, 0x9d, 0xe7, 0x30, 0x2f, 0x84, 0x11, 0x7c, 0x16, 0xba, 0x71, 0xb0, 0x66, 0xc9, 0x98, 0x79,
	0x32, 0x9e, 0x90, 0xd1, 0x7c, 0xfd, 0xcb, 0x81, 0x87, 0x23, 0xda, 0x5a, 0x0d, 0x5b, 0xc3, 0xe2,
	0x03, 0x5d, 0x94, 0x5d, 0xf1, 0xdd, 0x5d, 0x61, 0xd1, 0x0d, 0x4b, 0xc1, 0xdd, 0xa0, 0xf9, 0x0f,
	0xc3, 0x3b, 0xb8, 0xdd, 0xa0, 0x19, 0xde, 0x71, 0xd5, 0xf4, 0xe4, 0x6f, 0x76, 0xf9, 0xe6, 0xe8,
	0x66, 0xb8, 0xe5, 0x17, 0x4a, 0xeb, 0xdf, 0x97, 0xbe, 0x7f, 0xfb, 0xf5, 0x4d, 0x29, 0x4d, 0xd5,
	0xef, 0x93, 0x5c, 0xd5, 0xe9, 0xe9, 0x74, 0xaa, 0xba, 0x57, 0xf7, 0xf7, 0x2f, 0xd3, 0x5c, 0xd5,
	0xb5, 0x6a, 0x5e, 0x94, 0x5d, 0x9b, 0xa7, 0xa5, 0x4a, 0x47, 0x6b, 0xfa, 0xe7, 0xff, 0xdd, 0x2f,
	0xe8, 0x03, 0xbf, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x1f, 0x58, 0xd0, 0xd8, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubtitleServiceClient is the client API for SubtitleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubtitleServiceClient interface {
	Create(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
	GetList(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*SubtitleListResponse, error)
	Update(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error)
}

type subtitleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleServiceClient(cc grpc.ClientConnInterface) SubtitleServiceClient {
	return &subtitleServiceClient{cc}
}

func (c *subtitleServiceClient) Create(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) Get(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) GetList(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*SubtitleListResponse, error) {
	out := new(SubtitleListResponse)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) Update(ctx context.Context, in *Subtitle, opts ...grpc.CallOption) (*Subtitle, error) {
	out := new(Subtitle)
	err := c.cc.Invoke(ctx, "/services.SubtitleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleServiceServer is the server API for SubtitleService service.
type SubtitleServiceServer interface {
	Create(context.Context, *Subtitle) (*Subtitle, error)
	// rpc tryCreate (CloudStore) returns (CloudStore) {}
	// rpc batchCreate (CloudStoreList) returns (CloudStoreList) {}
	Get(context.Context, *Subtitle) (*Subtitle, error)
	GetList(context.Context, *Subtitle) (*SubtitleListResponse, error)
	Update(context.Context, *Subtitle) (*Subtitle, error)
}

// UnimplementedSubtitleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubtitleServiceServer struct {
}

func (*UnimplementedSubtitleServiceServer) Create(ctx context.Context, req *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSubtitleServiceServer) Get(ctx context.Context, req *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSubtitleServiceServer) GetList(ctx context.Context, req *Subtitle) (*SubtitleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedSubtitleServiceServer) Update(ctx context.Context, req *Subtitle) (*Subtitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterSubtitleServiceServer(s *grpc.Server, srv SubtitleServiceServer) {
	s.RegisterService(&_SubtitleService_serviceDesc, srv)
}

func _SubtitleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Create(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Get(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).GetList(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subtitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SubtitleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).Update(ctx, req.(*Subtitle))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubtitleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.SubtitleService",
	HandlerType: (*SubtitleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubtitleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubtitleService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SubtitleService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubtitleService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/subtitle.proto",
}
