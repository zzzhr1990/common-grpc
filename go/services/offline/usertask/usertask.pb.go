// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: offline/usertask.proto

package usertask

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddUserTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentity  int64       `protobuf:"varint,1,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	Data          []*UserTask `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	SavePath      string      `protobuf:"bytes,3,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	SaveIdentity  string      `protobuf:"bytes,4,opt,name=save_identity,json=saveIdentity,proto3" json:"save_identity,omitempty"`
	CreateAddress string      `protobuf:"bytes,5,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
}

func (x *AddUserTaskRequest) Reset() {
	*x = AddUserTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserTaskRequest) ProtoMessage() {}

func (x *AddUserTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserTaskRequest.ProtoReflect.Descriptor instead.
func (*AddUserTaskRequest) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{0}
}

func (x *AddUserTaskRequest) GetUserIdentity() int64 {
	if x != nil {
		return x.UserIdentity
	}
	return 0
}

func (x *AddUserTaskRequest) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddUserTaskRequest) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *AddUserTaskRequest) GetSaveIdentity() string {
	if x != nil {
		return x.SaveIdentity
	}
	return ""
}

func (x *AddUserTaskRequest) GetCreateAddress() string {
	if x != nil {
		return x.CreateAddress
	}
	return ""
}

type UserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentity   string `protobuf:"bytes,1,opt,name=task_identity,json=taskIdentity,proto3" json:"task_identity,omitempty"`
	UserIdentity   int64  `protobuf:"varint,2,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	CreateTime     int64  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type           int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Status         int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Size           int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	DownloadSize   int64  `protobuf:"varint,8,opt,name=download_size,json=downloadSize,proto3" json:"download_size,omitempty"`
	Progress       int64  `protobuf:"varint,9,opt,name=progress,proto3" json:"progress,omitempty"`
	ErrorCode      int32  `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage   string `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	SavePath       string `protobuf:"bytes,12,opt,name=save_path,json=savePath,proto3" json:"save_path,omitempty"`
	SaveIdentity   string `protobuf:"bytes,13,opt,name=save_identity,json=saveIdentity,proto3" json:"save_identity,omitempty"`
	AccessPath     string `protobuf:"bytes,14,opt,name=access_path,json=accessPath,proto3" json:"access_path,omitempty"`
	AccessIdentity string `protobuf:"bytes,15,opt,name=access_identity,json=accessIdentity,proto3" json:"access_identity,omitempty"`
	FileMime       string `protobuf:"bytes,16,opt,name=file_mime,json=fileMime,proto3" json:"file_mime,omitempty"`
	FileType       int32  `protobuf:"varint,17,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	CreateAddress  string `protobuf:"bytes,18,opt,name=create_address,json=createAddress,proto3" json:"create_address,omitempty"`
	Data           string `protobuf:"bytes,19,opt,name=data,proto3" json:"data,omitempty"`
	TextLink       string `protobuf:"bytes,20,opt,name=text_link,json=textLink,proto3" json:"text_link,omitempty"`
	FileHash       string `protobuf:"bytes,21,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Op             int32  `protobuf:"varint,22,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *UserTask) Reset() {
	*x = UserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTask) ProtoMessage() {}

func (x *UserTask) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTask.ProtoReflect.Descriptor instead.
func (*UserTask) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{1}
}

func (x *UserTask) GetTaskIdentity() string {
	if x != nil {
		return x.TaskIdentity
	}
	return ""
}

func (x *UserTask) GetUserIdentity() int64 {
	if x != nil {
		return x.UserIdentity
	}
	return 0
}

func (x *UserTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTask) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserTask) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserTask) GetDownloadSize() int64 {
	if x != nil {
		return x.DownloadSize
	}
	return 0
}

func (x *UserTask) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *UserTask) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *UserTask) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *UserTask) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *UserTask) GetSaveIdentity() string {
	if x != nil {
		return x.SaveIdentity
	}
	return ""
}

func (x *UserTask) GetAccessPath() string {
	if x != nil {
		return x.AccessPath
	}
	return ""
}

func (x *UserTask) GetAccessIdentity() string {
	if x != nil {
		return x.AccessIdentity
	}
	return ""
}

func (x *UserTask) GetFileMime() string {
	if x != nil {
		return x.FileMime
	}
	return ""
}

func (x *UserTask) GetFileType() int32 {
	if x != nil {
		return x.FileType
	}
	return 0
}

func (x *UserTask) GetCreateAddress() string {
	if x != nil {
		return x.CreateAddress
	}
	return ""
}

func (x *UserTask) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *UserTask) GetTextLink() string {
	if x != nil {
		return x.TextLink
	}
	return ""
}

func (x *UserTask) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *UserTask) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

type ListUserTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentity int64                    `protobuf:"varint,1,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	ListInfo     *common.ListInfo         `protobuf:"bytes,2,opt,name=list_info,json=listInfo,proto3" json:"list_info,omitempty"`
	OrderBy      []*common.OrderByRequest `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Filter       *FilterRequest           `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Op           int32                    `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *ListUserTaskRequest) Reset() {
	*x = ListUserTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserTaskRequest) ProtoMessage() {}

func (x *ListUserTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserTaskRequest.ProtoReflect.Descriptor instead.
func (*ListUserTaskRequest) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{2}
}

func (x *ListUserTaskRequest) GetUserIdentity() int64 {
	if x != nil {
		return x.UserIdentity
	}
	return 0
}

func (x *ListUserTaskRequest) GetListInfo() *common.ListInfo {
	if x != nil {
		return x.ListInfo
	}
	return nil
}

func (x *ListUserTaskRequest) GetOrderBy() []*common.OrderByRequest {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListUserTaskRequest) GetFilter() *FilterRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListUserTaskRequest) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

type DeleteUserTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdentity int64    `protobuf:"varint,1,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	TaskIdentity []string `protobuf:"bytes,2,rep,name=task_identity,json=taskIdentity,proto3" json:"task_identity,omitempty"`
}

func (x *DeleteUserTaskRequest) Reset() {
	*x = DeleteUserTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserTaskRequest) ProtoMessage() {}

func (x *DeleteUserTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserTaskRequest) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteUserTaskRequest) GetUserIdentity() int64 {
	if x != nil {
		return x.UserIdentity
	}
	return 0
}

func (x *DeleteUserTaskRequest) GetTaskIdentity() []string {
	if x != nil {
		return x.TaskIdentity
	}
	return nil
}

type UserTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserTask `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserTaskList) Reset() {
	*x = UserTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskList) ProtoMessage() {}

func (x *UserTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskList.ProtoReflect.Descriptor instead.
func (*UserTaskList) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{4}
}

func (x *UserTaskList) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentity []string `protobuf:"bytes,1,rep,name=task_identity,json=taskIdentity,proto3" json:"task_identity,omitempty"`
	Type         []int32  `protobuf:"varint,2,rep,packed,name=type,proto3" json:"type,omitempty"`
	Name         string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_usertask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offline_usertask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_offline_usertask_proto_rawDescGZIP(), []int{5}
}

func (x *FilterRequest) GetTaskIdentity() []string {
	if x != nil {
		return x.TaskIdentity
	}
	return nil
}

func (x *FilterRequest) GetType() []int32 {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FilterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_offline_usertask_proto protoreflect.FileDescriptor

var file_offline_usertask_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca,
	0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x99, 0x05, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x61, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x61, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x36,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x83, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x12,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x7a, 0x7a, 0x68, 0x72, 0x31, 0x39,
	0x39, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_offline_usertask_proto_rawDescOnce sync.Once
	file_offline_usertask_proto_rawDescData = file_offline_usertask_proto_rawDesc
)

func file_offline_usertask_proto_rawDescGZIP() []byte {
	file_offline_usertask_proto_rawDescOnce.Do(func() {
		file_offline_usertask_proto_rawDescData = protoimpl.X.CompressGZIP(file_offline_usertask_proto_rawDescData)
	})
	return file_offline_usertask_proto_rawDescData
}

var file_offline_usertask_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_offline_usertask_proto_goTypes = []interface{}{
	(*AddUserTaskRequest)(nil),    // 0: services.AddUserTaskRequest
	(*UserTask)(nil),              // 1: services.UserTask
	(*ListUserTaskRequest)(nil),   // 2: services.ListUserTaskRequest
	(*DeleteUserTaskRequest)(nil), // 3: services.DeleteUserTaskRequest
	(*UserTaskList)(nil),          // 4: services.UserTaskList
	(*FilterRequest)(nil),         // 5: services.FilterRequest
	(*common.ListInfo)(nil),       // 6: services.ListInfo
	(*common.OrderByRequest)(nil), // 7: services.OrderByRequest
	(*common.Int64Entity)(nil),    // 8: services.Int64Entity
	(*common.BoolEntity)(nil),     // 9: services.BoolEntity
}
var file_offline_usertask_proto_depIdxs = []int32{
	1,  // 0: services.AddUserTaskRequest.data:type_name -> services.UserTask
	6,  // 1: services.ListUserTaskRequest.list_info:type_name -> services.ListInfo
	7,  // 2: services.ListUserTaskRequest.order_by:type_name -> services.OrderByRequest
	5,  // 3: services.ListUserTaskRequest.filter:type_name -> services.FilterRequest
	1,  // 4: services.UserTaskList.data:type_name -> services.UserTask
	0,  // 5: services.UserTaskService.add:input_type -> services.AddUserTaskRequest
	1,  // 6: services.UserTaskService.parse:input_type -> services.UserTask
	2,  // 7: services.UserTaskService.list:input_type -> services.ListUserTaskRequest
	3,  // 8: services.UserTaskService.delete:input_type -> services.DeleteUserTaskRequest
	1,  // 9: services.UserTaskService.getListeners:input_type -> services.UserTask
	1,  // 10: services.UserTaskService.deleteListener:input_type -> services.UserTask
	8,  // 11: services.UserTaskService.add:output_type -> services.Int64Entity
	1,  // 12: services.UserTaskService.parse:output_type -> services.UserTask
	4,  // 13: services.UserTaskService.list:output_type -> services.UserTaskList
	8,  // 14: services.UserTaskService.delete:output_type -> services.Int64Entity
	4,  // 15: services.UserTaskService.getListeners:output_type -> services.UserTaskList
	9,  // 16: services.UserTaskService.deleteListener:output_type -> services.BoolEntity
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_offline_usertask_proto_init() }
func file_offline_usertask_proto_init() {
	if File_offline_usertask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offline_usertask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_usertask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_usertask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_usertask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_usertask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_usertask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offline_usertask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_offline_usertask_proto_goTypes,
		DependencyIndexes: file_offline_usertask_proto_depIdxs,
		MessageInfos:      file_offline_usertask_proto_msgTypes,
	}.Build()
	File_offline_usertask_proto = out.File
	file_offline_usertask_proto_rawDesc = nil
	file_offline_usertask_proto_goTypes = nil
	file_offline_usertask_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserTaskServiceClient is the client API for UserTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserTaskServiceClient interface {
	// rpc create (UserOfflineTask) returns (UserOfflineTask) {}
	Add(ctx context.Context, in *AddUserTaskRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	Parse(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTask, error)
	//rpc page (PageUserOfflineTaskRequest) returns (UserOfflineTaskPage) {}
	List(ctx context.Context, in *ListUserTaskRequest, opts ...grpc.CallOption) (*UserTaskList, error)
	Delete(ctx context.Context, in *DeleteUserTaskRequest, opts ...grpc.CallOption) (*common.Int64Entity, error)
	GetListeners(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTaskList, error)
	DeleteListener(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
}

type userTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserTaskServiceClient(cc grpc.ClientConnInterface) UserTaskServiceClient {
	return &userTaskServiceClient{cc}
}

func (c *userTaskServiceClient) Add(ctx context.Context, in *AddUserTaskRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) Parse(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTask, error) {
	out := new(UserTask)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) List(ctx context.Context, in *ListUserTaskRequest, opts ...grpc.CallOption) (*UserTaskList, error) {
	out := new(UserTaskList)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) Delete(ctx context.Context, in *DeleteUserTaskRequest, opts ...grpc.CallOption) (*common.Int64Entity, error) {
	out := new(common.Int64Entity)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) GetListeners(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*UserTaskList, error) {
	out := new(UserTaskList)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/getListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTaskServiceClient) DeleteListener(ctx context.Context, in *UserTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.UserTaskService/deleteListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTaskServiceServer is the server API for UserTaskService service.
type UserTaskServiceServer interface {
	// rpc create (UserOfflineTask) returns (UserOfflineTask) {}
	Add(context.Context, *AddUserTaskRequest) (*common.Int64Entity, error)
	Parse(context.Context, *UserTask) (*UserTask, error)
	//rpc page (PageUserOfflineTaskRequest) returns (UserOfflineTaskPage) {}
	List(context.Context, *ListUserTaskRequest) (*UserTaskList, error)
	Delete(context.Context, *DeleteUserTaskRequest) (*common.Int64Entity, error)
	GetListeners(context.Context, *UserTask) (*UserTaskList, error)
	DeleteListener(context.Context, *UserTask) (*common.BoolEntity, error)
}

// UnimplementedUserTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserTaskServiceServer struct {
}

func (*UnimplementedUserTaskServiceServer) Add(context.Context, *AddUserTaskRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedUserTaskServiceServer) Parse(context.Context, *UserTask) (*UserTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (*UnimplementedUserTaskServiceServer) List(context.Context, *ListUserTaskRequest) (*UserTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedUserTaskServiceServer) Delete(context.Context, *DeleteUserTaskRequest) (*common.Int64Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedUserTaskServiceServer) GetListeners(context.Context, *UserTask) (*UserTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeners not implemented")
}
func (*UnimplementedUserTaskServiceServer) DeleteListener(context.Context, *UserTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListener not implemented")
}

func RegisterUserTaskServiceServer(s *grpc.Server, srv UserTaskServiceServer) {
	s.RegisterService(&_UserTaskService_serviceDesc, srv)
}

func _UserTaskService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).Add(ctx, req.(*AddUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).Parse(ctx, req.(*UserTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).List(ctx, req.(*ListUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).Delete(ctx, req.(*DeleteUserTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_GetListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).GetListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/GetListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).GetListeners(ctx, req.(*UserTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTaskService_DeleteListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTaskServiceServer).DeleteListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserTaskService/DeleteListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTaskServiceServer).DeleteListener(ctx, req.(*UserTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserTaskService",
	HandlerType: (*UserTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _UserTaskService_Add_Handler,
		},
		{
			MethodName: "parse",
			Handler:    _UserTaskService_Parse_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UserTaskService_List_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _UserTaskService_Delete_Handler,
		},
		{
			MethodName: "getListeners",
			Handler:    _UserTaskService_GetListeners_Handler,
		},
		{
			MethodName: "deleteListener",
			Handler:    _UserTaskService_DeleteListener_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline/usertask.proto",
}
