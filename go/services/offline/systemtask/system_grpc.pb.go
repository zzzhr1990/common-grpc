// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package systemtask

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SystemTaskServiceClient is the client API for SystemTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemTaskServiceClient interface {
	Create(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error)
	// rpc parse (SystemTask) returns (SystemTaskDetail) {}
	Update(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error)
	// rpc updateProgress (UpdateProgressRequest) returns (BoolEntity) {}
	// rpc batchGet (BatchGetRequest) returns (BatchGetResponse) {}
	Get(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error)
	GetList(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*SystemTaskList, error)
	// getDetail detail
	GetDetail(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTaskDetail, error)
	Fetch(ctx context.Context, in *SystemTaskFetchRequest, opts ...grpc.CallOption) (*SystemTaskList, error)
	//rpc getDetail (SystemOfflineTask) returns (SystemOfflineTaskDetail) {}
	// rpc updateFile (SystemOfflineTaskFile) returns (BoolEntity) {}
	UploadFile(ctx context.Context, in *TaskFile, opts ...grpc.CallOption) (*TaskFile, error)
	UpdateFile(ctx context.Context, in *TaskFile, opts ...grpc.CallOption) (*TaskFile, error)
	// rpc changeStatus (StatusChangeRequest) returns (BoolEntity) {}
	Complete(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error)
	// ErrorRequest
	Error(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error)
}

type systemTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemTaskServiceClient(cc grpc.ClientConnInterface) SystemTaskServiceClient {
	return &systemTaskServiceClient{cc}
}

func (c *systemTaskServiceClient) Create(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error) {
	out := new(SystemTask)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) Update(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error) {
	out := new(SystemTask)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) Get(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error) {
	out := new(SystemTask)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) GetList(ctx context.Context, in *common.StringListEntity, opts ...grpc.CallOption) (*SystemTaskList, error) {
	out := new(SystemTaskList)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/getList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) GetDetail(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTaskDetail, error) {
	out := new(SystemTaskDetail)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/getDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) Fetch(ctx context.Context, in *SystemTaskFetchRequest, opts ...grpc.CallOption) (*SystemTaskList, error) {
	out := new(SystemTaskList)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) UploadFile(ctx context.Context, in *TaskFile, opts ...grpc.CallOption) (*TaskFile, error) {
	out := new(TaskFile)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/uploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) UpdateFile(ctx context.Context, in *TaskFile, opts ...grpc.CallOption) (*TaskFile, error) {
	out := new(TaskFile)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/updateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) Complete(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error) {
	out := new(SystemTask)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemTaskServiceClient) Error(ctx context.Context, in *SystemTask, opts ...grpc.CallOption) (*SystemTask, error) {
	out := new(SystemTask)
	err := c.cc.Invoke(ctx, "/services.SystemTaskService/error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemTaskServiceServer is the server API for SystemTaskService service.
// All implementations must embed UnimplementedSystemTaskServiceServer
// for forward compatibility
type SystemTaskServiceServer interface {
	Create(context.Context, *SystemTask) (*SystemTask, error)
	// rpc parse (SystemTask) returns (SystemTaskDetail) {}
	Update(context.Context, *SystemTask) (*SystemTask, error)
	// rpc updateProgress (UpdateProgressRequest) returns (BoolEntity) {}
	// rpc batchGet (BatchGetRequest) returns (BatchGetResponse) {}
	Get(context.Context, *SystemTask) (*SystemTask, error)
	GetList(context.Context, *common.StringListEntity) (*SystemTaskList, error)
	// getDetail detail
	GetDetail(context.Context, *SystemTask) (*SystemTaskDetail, error)
	Fetch(context.Context, *SystemTaskFetchRequest) (*SystemTaskList, error)
	//rpc getDetail (SystemOfflineTask) returns (SystemOfflineTaskDetail) {}
	// rpc updateFile (SystemOfflineTaskFile) returns (BoolEntity) {}
	UploadFile(context.Context, *TaskFile) (*TaskFile, error)
	UpdateFile(context.Context, *TaskFile) (*TaskFile, error)
	// rpc changeStatus (StatusChangeRequest) returns (BoolEntity) {}
	Complete(context.Context, *SystemTask) (*SystemTask, error)
	// ErrorRequest
	Error(context.Context, *SystemTask) (*SystemTask, error)
	mustEmbedUnimplementedSystemTaskServiceServer()
}

// UnimplementedSystemTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemTaskServiceServer struct {
}

func (UnimplementedSystemTaskServiceServer) Create(context.Context, *SystemTask) (*SystemTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSystemTaskServiceServer) Update(context.Context, *SystemTask) (*SystemTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSystemTaskServiceServer) Get(context.Context, *SystemTask) (*SystemTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSystemTaskServiceServer) GetList(context.Context, *common.StringListEntity) (*SystemTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSystemTaskServiceServer) GetDetail(context.Context, *SystemTask) (*SystemTaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedSystemTaskServiceServer) Fetch(context.Context, *SystemTaskFetchRequest) (*SystemTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedSystemTaskServiceServer) UploadFile(context.Context, *TaskFile) (*TaskFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedSystemTaskServiceServer) UpdateFile(context.Context, *TaskFile) (*TaskFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedSystemTaskServiceServer) Complete(context.Context, *SystemTask) (*SystemTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedSystemTaskServiceServer) Error(context.Context, *SystemTask) (*SystemTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedSystemTaskServiceServer) mustEmbedUnimplementedSystemTaskServiceServer() {}

// UnsafeSystemTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemTaskServiceServer will
// result in compilation errors.
type UnsafeSystemTaskServiceServer interface {
	mustEmbedUnimplementedSystemTaskServiceServer()
}

func RegisterSystemTaskServiceServer(s grpc.ServiceRegistrar, srv SystemTaskServiceServer) {
	s.RegisterService(&_SystemTaskService_serviceDesc, srv)
}

func _SystemTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Create(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Update(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Get(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.StringListEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/getList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).GetList(ctx, req.(*common.StringListEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/getDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).GetDetail(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTaskFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Fetch(ctx, req.(*SystemTaskFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/uploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).UploadFile(ctx, req.(*TaskFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/updateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).UpdateFile(ctx, req.(*TaskFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Complete(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemTaskService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTaskServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SystemTaskService/error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTaskServiceServer).Error(ctx, req.(*SystemTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.SystemTaskService",
	HandlerType: (*SystemTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _SystemTaskService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SystemTaskService_Update_Handler,
		},
		{
			MethodName: "get",
			Handler:    _SystemTaskService_Get_Handler,
		},
		{
			MethodName: "getList",
			Handler:    _SystemTaskService_GetList_Handler,
		},
		{
			MethodName: "getDetail",
			Handler:    _SystemTaskService_GetDetail_Handler,
		},
		{
			MethodName: "fetch",
			Handler:    _SystemTaskService_Fetch_Handler,
		},
		{
			MethodName: "uploadFile",
			Handler:    _SystemTaskService_UploadFile_Handler,
		},
		{
			MethodName: "updateFile",
			Handler:    _SystemTaskService_UpdateFile_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _SystemTaskService_Complete_Handler,
		},
		{
			MethodName: "error",
			Handler:    _SystemTaskService_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline/system.proto",
}
