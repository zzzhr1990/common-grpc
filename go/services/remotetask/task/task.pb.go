// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remotetask/task.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleRemoteTaskRequest struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRemoteTaskRequest) Reset()         { *m = SimpleRemoteTaskRequest{} }
func (m *SimpleRemoteTaskRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRemoteTaskRequest) ProtoMessage()    {}
func (*SimpleRemoteTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{0}
}

func (m *SimpleRemoteTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRemoteTaskRequest.Unmarshal(m, b)
}
func (m *SimpleRemoteTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRemoteTaskRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRemoteTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRemoteTaskRequest.Merge(m, src)
}
func (m *SimpleRemoteTaskRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRemoteTaskRequest.Size(m)
}
func (m *SimpleRemoteTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRemoteTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRemoteTaskRequest proto.InternalMessageInfo

func (m *SimpleRemoteTaskRequest) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

type RemoteTaskErrorRequest struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	ErrorCode            int32    `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteTaskErrorRequest) Reset()         { *m = RemoteTaskErrorRequest{} }
func (m *RemoteTaskErrorRequest) String() string { return proto.CompactTextString(m) }
func (*RemoteTaskErrorRequest) ProtoMessage()    {}
func (*RemoteTaskErrorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{1}
}

func (m *RemoteTaskErrorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteTaskErrorRequest.Unmarshal(m, b)
}
func (m *RemoteTaskErrorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteTaskErrorRequest.Marshal(b, m, deterministic)
}
func (m *RemoteTaskErrorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteTaskErrorRequest.Merge(m, src)
}
func (m *RemoteTaskErrorRequest) XXX_Size() int {
	return xxx_messageInfo_RemoteTaskErrorRequest.Size(m)
}
func (m *RemoteTaskErrorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteTaskErrorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteTaskErrorRequest proto.InternalMessageInfo

func (m *RemoteTaskErrorRequest) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *RemoteTaskErrorRequest) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RemoteTaskErrorRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type RemoteTask struct {
	Identity             int64    `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Source               string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Consumer             string   `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Producer             string   `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`
	CreateTime           int64    `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ConsumerTime         int64    `protobuf:"varint,7,opt,name=consumerTime,proto3" json:"consumerTime,omitempty"`
	Deadline             int64    `protobuf:"varint,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Data                 string   `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	Status               int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Comment              string   `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	Reason               string   `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteTask) Reset()         { *m = RemoteTask{} }
func (m *RemoteTask) String() string { return proto.CompactTextString(m) }
func (*RemoteTask) ProtoMessage()    {}
func (*RemoteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{2}
}

func (m *RemoteTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteTask.Unmarshal(m, b)
}
func (m *RemoteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteTask.Marshal(b, m, deterministic)
}
func (m *RemoteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteTask.Merge(m, src)
}
func (m *RemoteTask) XXX_Size() int {
	return xxx_messageInfo_RemoteTask.Size(m)
}
func (m *RemoteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteTask.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteTask proto.InternalMessageInfo

func (m *RemoteTask) GetIdentity() int64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *RemoteTask) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RemoteTask) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RemoteTask) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *RemoteTask) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *RemoteTask) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RemoteTask) GetConsumerTime() int64 {
	if m != nil {
		return m.ConsumerTime
	}
	return 0
}

func (m *RemoteTask) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *RemoteTask) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RemoteTask) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RemoteTask) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *RemoteTask) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type FetchRequest struct {
	Consumer             string   `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Type                 []int32  `protobuf:"varint,2,rep,packed,name=type,proto3" json:"type,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Status               []int32  `protobuf:"varint,4,rep,packed,name=status,proto3" json:"status,omitempty"`
	NextStatus           int32    `protobuf:"varint,5,opt,name=nextStatus,proto3" json:"nextStatus,omitempty"`
	Deadline             int64    `protobuf:"varint,6,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Recover              bool     `protobuf:"varint,7,opt,name=recover,proto3" json:"recover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchRequest) Reset()         { *m = FetchRequest{} }
func (m *FetchRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()    {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{3}
}

func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRequest.Unmarshal(m, b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
}
func (m *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(m, src)
}
func (m *FetchRequest) XXX_Size() int {
	return xxx_messageInfo_FetchRequest.Size(m)
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

func (m *FetchRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *FetchRequest) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FetchRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FetchRequest) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FetchRequest) GetNextStatus() int32 {
	if m != nil {
		return m.NextStatus
	}
	return 0
}

func (m *FetchRequest) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *FetchRequest) GetRecover() bool {
	if m != nil {
		return m.Recover
	}
	return false
}

type ListRequest struct {
	Consumer             string   `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Status               []int32  `protobuf:"varint,4,rep,packed,name=status,proto3" json:"status,omitempty"`
	Deadline             int64    `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{4}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *ListRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ListRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListRequest) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListRequest) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

type FetchResponse struct {
	Data                 []*RemoteTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FetchResponse) Reset()         { *m = FetchResponse{} }
func (m *FetchResponse) String() string { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()    {}
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcc5d1c011e0eea8, []int{5}
}

func (m *FetchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchResponse.Unmarshal(m, b)
}
func (m *FetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchResponse.Marshal(b, m, deterministic)
}
func (m *FetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchResponse.Merge(m, src)
}
func (m *FetchResponse) XXX_Size() int {
	return xxx_messageInfo_FetchResponse.Size(m)
}
func (m *FetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchResponse proto.InternalMessageInfo

func (m *FetchResponse) GetData() []*RemoteTask {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleRemoteTaskRequest)(nil), "services.SimpleRemoteTaskRequest")
	proto.RegisterType((*RemoteTaskErrorRequest)(nil), "services.RemoteTaskErrorRequest")
	proto.RegisterType((*RemoteTask)(nil), "services.RemoteTask")
	proto.RegisterType((*FetchRequest)(nil), "services.FetchRequest")
	proto.RegisterType((*ListRequest)(nil), "services.ListRequest")
	proto.RegisterType((*FetchResponse)(nil), "services.FetchResponse")
}

func init() { proto.RegisterFile("remotetask/task.proto", fileDescriptor_dcc5d1c011e0eea8) }

var fileDescriptor_dcc5d1c011e0eea8 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x9b, 0xd8, 0x4d, 0x26, 0xe1, 0xc0, 0xaa, 0x4d, 0x57, 0x11, 0xaa, 0x82, 0x4f, 0xb9,
	0x10, 0x43, 0xab, 0x56, 0x04, 0x21, 0x24, 0x5a, 0x85, 0x13, 0x5c, 0x9c, 0x9e, 0xb8, 0x20, 0xd7,
	0x1e, 0x12, 0xab, 0xb1, 0xd7, 0xec, 0xae, 0x23, 0x9a, 0x1f, 0xe0, 0x87, 0xf8, 0x02, 0x8e, 0x7c,
	0x15, 0xda, 0xdd, 0x38, 0x76, 0x42, 0x5a, 0xa5, 0x70, 0x49, 0xfc, 0x66, 0xdf, 0x9b, 0x9d, 0x79,
	0x63, 0xef, 0xc2, 0x11, 0xc7, 0x84, 0x49, 0x94, 0x81, 0xb8, 0xf5, 0xd4, 0xcf, 0x20, 0xe3, 0x4c,
	0x32, 0xd2, 0x10, 0xc8, 0xe7, 0x71, 0x88, 0xa2, 0xdb, 0x0d, 0x59, 0x92, 0xb0, 0xd4, 0x33, 0x7f,
	0x5f, 0x30, 0x95, 0xb1, 0xbc, 0x33, 0x2c, 0xf7, 0x1c, 0x8e, 0xc7, 0x71, 0x92, 0xcd, 0xd0, 0xd7,
	0x49, 0xae, 0x03, 0x71, 0xeb, 0xe3, 0xb7, 0x1c, 0x85, 0x24, 0x5d, 0x68, 0xc4, 0x91, 0x21, 0x53,
	0xab, 0x67, 0xf5, 0x6b, 0xfe, 0x0a, 0xbb, 0x73, 0xe8, 0x94, 0x82, 0x11, 0xe7, 0x8c, 0xef, 0xa0,
	0x22, 0xcf, 0xa0, 0x89, 0x8a, 0x7b, 0xc5, 0x22, 0xa4, 0xfb, 0x3d, 0xab, 0x6f, 0xfb, 0x65, 0x80,
	0xb8, 0xd0, 0xd6, 0xe0, 0x13, 0x0a, 0x11, 0x4c, 0x90, 0xd6, 0x7a, 0x56, 0xbf, 0xe9, 0xaf, 0xc5,
	0xdc, 0xdf, 0xfb, 0x00, 0xe5, 0xc6, 0x0f, 0x6e, 0x46, 0xa0, 0x2e, 0xef, 0xb2, 0x62, 0x1f, 0xfd,
	0x4c, 0x3a, 0xe0, 0x08, 0x96, 0xf3, 0xb0, 0x48, 0xbe, 0x44, 0x2a, 0x4f, 0xc8, 0x52, 0x91, 0x27,
	0xc8, 0x69, 0x5d, 0xaf, 0xac, 0xb0, 0x5a, 0xcb, 0x38, 0x8b, 0xf2, 0x10, 0x39, 0xb5, 0xcd, 0x5a,
	0x81, 0xc9, 0x09, 0x40, 0xc8, 0x31, 0x90, 0x78, 0x1d, 0x27, 0x48, 0x1d, 0x5d, 0x41, 0x25, 0xa2,
	0x5a, 0x2a, 0xf2, 0x68, 0xc6, 0x81, 0x66, 0xac, 0xc5, 0x54, 0xfe, 0x08, 0x83, 0x68, 0x16, 0xa7,
	0x48, 0x1b, 0xa6, 0x87, 0x02, 0xab, 0x1e, 0xa2, 0x40, 0x06, 0xb4, 0xa9, 0xf7, 0xd5, 0xcf, 0xba,
	0x07, 0x19, 0xc8, 0x5c, 0x50, 0xd0, 0x9d, 0x2d, 0x11, 0xa1, 0x70, 0xa0, 0x06, 0x8c, 0xa9, 0xa4,
	0x2d, 0x4d, 0x2f, 0xa0, 0x52, 0x70, 0x0c, 0x04, 0x4b, 0x69, 0xdb, 0x74, 0x6d, 0x90, 0xfb, 0xcb,
	0x82, 0xf6, 0x07, 0x94, 0xe1, 0xb4, 0x32, 0xbb, 0x95, 0x0d, 0xd6, 0x86, 0x0d, 0xa5, 0x9d, 0xb5,
	0x95, 0x9d, 0x87, 0x60, 0x87, 0x2c, 0x4f, 0xa5, 0x76, 0xd3, 0xf6, 0x0d, 0xa8, 0x14, 0x58, 0xd7,
	0xdc, 0xa2, 0xc0, 0x13, 0x80, 0x14, 0xbf, 0xcb, 0xb1, 0x59, 0xb3, 0xb5, 0xa4, 0x12, 0x59, 0x33,
	0xc2, 0xd9, 0x30, 0x82, 0xc2, 0x01, 0xc7, 0x90, 0xcd, 0x91, 0x6b, 0x0f, 0x1b, 0x7e, 0x01, 0xdd,
	0x1f, 0x16, 0xb4, 0x3e, 0xc6, 0x42, 0x3e, 0xae, 0x07, 0xeb, 0x1f, 0x7b, 0xa8, 0xd6, 0x68, 0xaf,
	0xd7, 0xe8, 0x0e, 0xe1, 0xc9, 0xd2, 0x4d, 0x91, 0xb1, 0x54, 0x20, 0xe9, 0x2f, 0xa7, 0x67, 0xf5,
	0x6a, 0xfd, 0xd6, 0xe9, 0xe1, 0xa0, 0xf8, 0x20, 0x07, 0x95, 0x6f, 0x4d, 0x33, 0x4e, 0x7f, 0xd6,
	0xe1, 0x69, 0x19, 0x1c, 0x1b, 0x1e, 0xb9, 0x00, 0xc7, 0xbc, 0x4b, 0x64, 0xab, 0xb6, 0xbb, 0x35,
	0xea, 0xee, 0x91, 0x37, 0x60, 0x7f, 0x55, 0x85, 0x90, 0x4e, 0x49, 0xa8, 0xce, 0xb9, 0x7b, 0xfc,
	0x57, 0xdc, 0x54, 0xec, 0xee, 0x91, 0x2b, 0x70, 0x22, 0x9c, 0xa1, 0x44, 0xf2, 0xbc, 0x24, 0xdd,
	0x73, 0x42, 0x54, 0x0b, 0xb8, 0x64, 0x6c, 0x36, 0x32, 0x67, 0xc3, 0x1e, 0x19, 0xa9, 0x19, 0x28,
	0xc9, 0xff, 0xa5, 0xb9, 0x00, 0x27, 0xcf, 0xa2, 0x9d, 0xfa, 0x5f, 0xd3, 0xbd, 0x07, 0x5b, 0x1f,
	0x1a, 0xa4, 0xb7, 0x4d, 0x56, 0x3d, 0xad, 0xee, 0x4d, 0xf1, 0x1a, 0xea, 0xb3, 0x58, 0x48, 0x72,
	0x54, 0xae, 0x57, 0x5e, 0xb2, 0x87, 0x0c, 0x3c, 0x83, 0xda, 0x04, 0xe5, 0x23, 0x27, 0x76, 0x0e,
	0x36, 0x47, 0xb1, 0x8b, 0xac, 0x5a, 0xe5, 0xe5, 0xbb, 0xcf, 0x6f, 0x27, 0xb1, 0x9c, 0xe6, 0x37,
	0x83, 0x90, 0x25, 0xde, 0x62, 0xb1, 0x98, 0xf2, 0x57, 0xc3, 0xe1, 0xcb, 0xe5, 0x41, 0xff, 0x62,
	0xc2, 0xb3, 0xd0, 0x9b, 0x30, 0xaf, 0x10, 0x7b, 0x1b, 0x17, 0xc5, 0x8d, 0xa3, 0xef, 0x80, 0xb3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x7e, 0x56, 0x98, 0x42, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteTaskServiceClient is the client API for RemoteTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteTaskServiceClient interface {
	Create(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*RemoteTask, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	Delete(ctx context.Context, in *SimpleRemoteTaskRequest, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Complete(ctx context.Context, in *SimpleRemoteTaskRequest, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Update(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Error(ctx context.Context, in *RemoteTaskErrorRequest, opts ...grpc.CallOption) (*common.BoolEntity, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	Get(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*RemoteTask, error)
	Reset(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
}

type remoteTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteTaskServiceClient(cc *grpc.ClientConn) RemoteTaskServiceClient {
	return &remoteTaskServiceClient{cc}
}

func (c *remoteTaskServiceClient) Create(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*RemoteTask, error) {
	out := new(RemoteTask)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Delete(ctx context.Context, in *SimpleRemoteTaskRequest, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Complete(ctx context.Context, in *SimpleRemoteTaskRequest, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Update(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Error(ctx context.Context, in *RemoteTaskErrorRequest, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Get(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*RemoteTask, error) {
	out := new(RemoteTask)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTaskServiceClient) Reset(ctx context.Context, in *RemoteTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.RemoteTaskService/reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteTaskServiceServer is the server API for RemoteTaskService service.
type RemoteTaskServiceServer interface {
	Create(context.Context, *RemoteTask) (*RemoteTask, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	Delete(context.Context, *SimpleRemoteTaskRequest) (*common.BoolEntity, error)
	Complete(context.Context, *SimpleRemoteTaskRequest) (*common.BoolEntity, error)
	Update(context.Context, *RemoteTask) (*common.BoolEntity, error)
	Error(context.Context, *RemoteTaskErrorRequest) (*common.BoolEntity, error)
	List(context.Context, *ListRequest) (*FetchResponse, error)
	Get(context.Context, *RemoteTask) (*RemoteTask, error)
	Reset(context.Context, *RemoteTask) (*common.BoolEntity, error)
}

// UnimplementedRemoteTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteTaskServiceServer struct {
}

func (*UnimplementedRemoteTaskServiceServer) Create(ctx context.Context, req *RemoteTask) (*RemoteTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Fetch(ctx context.Context, req *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Delete(ctx context.Context, req *SimpleRemoteTaskRequest) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Complete(ctx context.Context, req *SimpleRemoteTaskRequest) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Update(ctx context.Context, req *RemoteTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Error(ctx context.Context, req *RemoteTaskErrorRequest) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) List(ctx context.Context, req *ListRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Get(ctx context.Context, req *RemoteTask) (*RemoteTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRemoteTaskServiceServer) Reset(ctx context.Context, req *RemoteTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterRemoteTaskServiceServer(s *grpc.Server, srv RemoteTaskServiceServer) {
	s.RegisterService(&_RemoteTaskService_serviceDesc, srv)
}

func _RemoteTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Create(ctx, req.(*RemoteTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRemoteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Delete(ctx, req.(*SimpleRemoteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRemoteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Complete(ctx, req.(*SimpleRemoteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Update(ctx, req.(*RemoteTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTaskErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Error(ctx, req.(*RemoteTaskErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Get(ctx, req.(*RemoteTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTaskService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTaskServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.RemoteTaskService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTaskServiceServer).Reset(ctx, req.(*RemoteTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.RemoteTaskService",
	HandlerType: (*RemoteTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _RemoteTaskService_Create_Handler,
		},
		{
			MethodName: "fetch",
			Handler:    _RemoteTaskService_Fetch_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RemoteTaskService_Delete_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _RemoteTaskService_Complete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RemoteTaskService_Update_Handler,
		},
		{
			MethodName: "error",
			Handler:    _RemoteTaskService_Error_Handler,
		},
		{
			MethodName: "list",
			Handler:    _RemoteTaskService_List_Handler,
		},
		{
			MethodName: "get",
			Handler:    _RemoteTaskService_Get_Handler,
		},
		{
			MethodName: "reset",
			Handler:    _RemoteTaskService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remotetask/task.proto",
}
