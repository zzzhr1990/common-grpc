// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: task/v5simpletask.proto

package task

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleTaskServiceClient is the client API for SimpleTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleTaskServiceClient interface {
	Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Fetch(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error)
	Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error)
	Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error)
}

type simpleTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleTaskServiceClient(cc grpc.ClientConnInterface) SimpleTaskServiceClient {
	return &simpleTaskServiceClient{cc}
}

func (c *simpleTaskServiceClient) Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Fetch(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error) {
	out := new(FetchTaskResponse)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error) {
	out := new(ErrorTask)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskServiceClient) Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/v5.services.SimpleTaskService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleTaskServiceServer is the server API for SimpleTaskService service.
// All implementations must embed UnimplementedSimpleTaskServiceServer
// for forward compatibility
type SimpleTaskServiceServer interface {
	Create(context.Context, *SimpleTask) (*SimpleTask, error)
	Fetch(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error)
	Complete(context.Context, *SimpleTask) (*common.BoolEntity, error)
	Update(context.Context, *SimpleTask) (*SimpleTask, error)
	Error(context.Context, *ErrorTask) (*ErrorTask, error)
	Get(context.Context, *SimpleTask) (*SimpleTask, error)
	Reset(context.Context, *ErrorTask) (*SimpleTask, error)
	mustEmbedUnimplementedSimpleTaskServiceServer()
}

// UnimplementedSimpleTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleTaskServiceServer struct {
}

func (UnimplementedSimpleTaskServiceServer) Create(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Fetch(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Complete(context.Context, *SimpleTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Update(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Error(context.Context, *ErrorTask) (*ErrorTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Get(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSimpleTaskServiceServer) Reset(context.Context, *ErrorTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedSimpleTaskServiceServer) mustEmbedUnimplementedSimpleTaskServiceServer() {}

// UnsafeSimpleTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleTaskServiceServer will
// result in compilation errors.
type UnsafeSimpleTaskServiceServer interface {
	mustEmbedUnimplementedSimpleTaskServiceServer()
}

func RegisterSimpleTaskServiceServer(s grpc.ServiceRegistrar, srv SimpleTaskServiceServer) {
	s.RegisterService(&SimpleTaskService_ServiceDesc, srv)
}

func _SimpleTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Create(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Fetch(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Complete(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Update(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Error(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Get(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v5.services.SimpleTaskService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskServiceServer).Reset(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleTaskService_ServiceDesc is the grpc.ServiceDesc for SimpleTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v5.services.SimpleTaskService",
	HandlerType: (*SimpleTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SimpleTaskService_Create_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _SimpleTaskService_Fetch_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _SimpleTaskService_Complete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SimpleTaskService_Update_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _SimpleTaskService_Error_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SimpleTaskService_Get_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _SimpleTaskService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/v5simpletask.proto",
}
