// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package task

import (
	context "context"
	common "github.com/zzzhr1990/common-grpc/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleTaskCenterServiceClient is the client API for SimpleTaskCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleTaskCenterServiceClient interface {
	Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// rpc delete(SimpleTask) returns (BoolEntity) {} // del
	Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error)
	Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error)
	// rpc list(ListRequest) returns (FetchResponse) {} // del
	Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error)
	Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error)
}

type simpleTaskCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleTaskCenterServiceClient(cc grpc.ClientConnInterface) SimpleTaskCenterServiceClient {
	return &simpleTaskCenterServiceClient{cc}
}

func (c *simpleTaskCenterServiceClient) Create(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Complete(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*common.BoolEntity, error) {
	out := new(common.BoolEntity)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Update(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Error(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*ErrorTask, error) {
	out := new(ErrorTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Get(ctx context.Context, in *SimpleTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleTaskCenterServiceClient) Reset(ctx context.Context, in *ErrorTask, opts ...grpc.CallOption) (*SimpleTask, error) {
	out := new(SimpleTask)
	err := c.cc.Invoke(ctx, "/services.SimpleTaskCenterService/reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleTaskCenterServiceServer is the server API for SimpleTaskCenterService service.
// All implementations must embed UnimplementedSimpleTaskCenterServiceServer
// for forward compatibility
type SimpleTaskCenterServiceServer interface {
	Create(context.Context, *SimpleTask) (*SimpleTask, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// rpc delete(SimpleTask) returns (BoolEntity) {} // del
	Complete(context.Context, *SimpleTask) (*common.BoolEntity, error)
	Update(context.Context, *SimpleTask) (*SimpleTask, error)
	Error(context.Context, *ErrorTask) (*ErrorTask, error)
	// rpc list(ListRequest) returns (FetchResponse) {} // del
	Get(context.Context, *SimpleTask) (*SimpleTask, error)
	Reset(context.Context, *ErrorTask) (*SimpleTask, error)
	mustEmbedUnimplementedSimpleTaskCenterServiceServer()
}

// UnimplementedSimpleTaskCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleTaskCenterServiceServer struct {
}

func (UnimplementedSimpleTaskCenterServiceServer) Create(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Complete(context.Context, *SimpleTask) (*common.BoolEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Update(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Error(context.Context, *ErrorTask) (*ErrorTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Get(context.Context, *SimpleTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) Reset(context.Context, *ErrorTask) (*SimpleTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedSimpleTaskCenterServiceServer) mustEmbedUnimplementedSimpleTaskCenterServiceServer() {
}

// UnsafeSimpleTaskCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleTaskCenterServiceServer will
// result in compilation errors.
type UnsafeSimpleTaskCenterServiceServer interface {
	mustEmbedUnimplementedSimpleTaskCenterServiceServer()
}

func RegisterSimpleTaskCenterServiceServer(s grpc.ServiceRegistrar, srv SimpleTaskCenterServiceServer) {
	s.RegisterService(&SimpleTaskCenterService_ServiceDesc, srv)
}

func _SimpleTaskCenterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Create(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Complete(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Update(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Error(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Get(ctx, req.(*SimpleTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleTaskCenterService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleTaskCenterServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SimpleTaskCenterService/reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleTaskCenterServiceServer).Reset(ctx, req.(*ErrorTask))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleTaskCenterService_ServiceDesc is the grpc.ServiceDesc for SimpleTaskCenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleTaskCenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.SimpleTaskCenterService",
	HandlerType: (*SimpleTaskCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _SimpleTaskCenterService_Create_Handler,
		},
		{
			MethodName: "fetch",
			Handler:    _SimpleTaskCenterService_Fetch_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _SimpleTaskCenterService_Complete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _SimpleTaskCenterService_Update_Handler,
		},
		{
			MethodName: "error",
			Handler:    _SimpleTaskCenterService_Error_Handler,
		},
		{
			MethodName: "get",
			Handler:    _SimpleTaskCenterService_Get_Handler,
		},
		{
			MethodName: "reset",
			Handler:    _SimpleTaskCenterService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task.proto",
}
