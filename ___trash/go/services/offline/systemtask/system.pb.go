// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.5
// source: offline/system.proto

package systemtask

import (
	common "github.com/zzzhr1990/common-grpc/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//message BatchGetRequest {
//repeated string identities = 1;
//}
//
//message BatchGetResponse {
//repeated SystemOfflineTaskDetail data = 1;
//}
//
type SystemTaskFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       []int32 `protobuf:"varint,1,rep,packed,name=type,proto3" json:"type,omitempty"`
	Status     []int32 `protobuf:"varint,2,rep,packed,name=status,proto3" json:"status,omitempty"`
	NextStatus int32   `protobuf:"varint,3,opt,name=next_status,json=nextStatus,proto3" json:"next_status,omitempty"`
	Limit      int64   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Consumer   string  `protobuf:"bytes,5,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Recover    bool    `protobuf:"varint,6,opt,name=recover,proto3" json:"recover,omitempty"`
	Desc       bool    `protobuf:"varint,7,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SystemTaskFetchRequest) Reset() {
	*x = SystemTaskFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTaskFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTaskFetchRequest) ProtoMessage() {}

func (x *SystemTaskFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offline_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTaskFetchRequest.ProtoReflect.Descriptor instead.
func (*SystemTaskFetchRequest) Descriptor() ([]byte, []int) {
	return file_offline_system_proto_rawDescGZIP(), []int{0}
}

func (x *SystemTaskFetchRequest) GetType() []int32 {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SystemTaskFetchRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SystemTaskFetchRequest) GetNextStatus() int32 {
	if x != nil {
		return x.NextStatus
	}
	return 0
}

func (x *SystemTaskFetchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SystemTaskFetchRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *SystemTaskFetchRequest) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *SystemTaskFetchRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type SystemTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SystemTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SystemTaskList) Reset() {
	*x = SystemTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTaskList) ProtoMessage() {}

func (x *SystemTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_offline_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTaskList.ProtoReflect.Descriptor instead.
func (*SystemTaskList) Descriptor() ([]byte, []int) {
	return file_offline_system_proto_rawDescGZIP(), []int{1}
}

func (x *SystemTaskList) GetData() []*SystemTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskIdentity  string `protobuf:"bytes,2,opt,name=task_identity,json=taskIdentity,proto3" json:"task_identity,omitempty"`
	CreateTime    int64  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Path          string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Hash          string `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Size          int64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	ProcessedSize int64  `protobuf:"varint,9,opt,name=processed_size,json=processedSize,proto3" json:"processed_size,omitempty"`
	Status        int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Flag          int32  `protobuf:"varint,11,opt,name=flag,proto3" json:"flag,omitempty"`
	FileIndex     int32  `protobuf:"varint,12,opt,name=file_index,json=fileIndex,proto3" json:"file_index,omitempty"`
	Finish        bool   `protobuf:"varint,13,opt,name=finish,proto3" json:"finish,omitempty"`
	Directory     bool   `protobuf:"varint,14,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *TaskFile) Reset() {
	*x = TaskFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFile) ProtoMessage() {}

func (x *TaskFile) ProtoReflect() protoreflect.Message {
	mi := &file_offline_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFile.ProtoReflect.Descriptor instead.
func (*TaskFile) Descriptor() ([]byte, []int) {
	return file_offline_system_proto_rawDescGZIP(), []int{2}
}

func (x *TaskFile) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *TaskFile) GetTaskIdentity() string {
	if x != nil {
		return x.TaskIdentity
	}
	return ""
}

func (x *TaskFile) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TaskFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TaskFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TaskFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TaskFile) GetProcessedSize() int64 {
	if x != nil {
		return x.ProcessedSize
	}
	return 0
}

func (x *TaskFile) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskFile) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *TaskFile) GetFileIndex() int32 {
	if x != nil {
		return x.FileIndex
	}
	return 0
}

func (x *TaskFile) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *TaskFile) GetDirectory() bool {
	if x != nil {
		return x.Directory
	}
	return false
}

type SystemTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Size          int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	CreateUser    int64  `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type          int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Status        int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Flag          int32  `protobuf:"varint,8,opt,name=flag,proto3" json:"flag,omitempty"`
	ProcessedSize int64  `protobuf:"varint,9,opt,name=processed_size,json=processedSize,proto3" json:"processed_size,omitempty"`
	ErrorCode     int32  `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage  string `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreateAddr    string `protobuf:"bytes,12,opt,name=create_addr,json=createAddr,proto3" json:"create_addr,omitempty"`
	Data          string `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`
	TextLink      string `protobuf:"bytes,14,opt,name=text_link,json=textLink,proto3" json:"text_link,omitempty"`
	ErrorCount    int32  `protobuf:"varint,15,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	ErrorTime     int64  `protobuf:"varint,16,opt,name=error_time,json=errorTime,proto3" json:"error_time,omitempty"`
	Op            int32  `protobuf:"varint,17,opt,name=op,proto3" json:"op,omitempty"`
	FileHash      string `protobuf:"bytes,18,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Username      string `protobuf:"bytes,19,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SystemTask) Reset() {
	*x = SystemTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTask) ProtoMessage() {}

func (x *SystemTask) ProtoReflect() protoreflect.Message {
	mi := &file_offline_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTask.ProtoReflect.Descriptor instead.
func (*SystemTask) Descriptor() ([]byte, []int) {
	return file_offline_system_proto_rawDescGZIP(), []int{3}
}

func (x *SystemTask) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SystemTask) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SystemTask) GetCreateUser() int64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *SystemTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SystemTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemTask) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SystemTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SystemTask) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SystemTask) GetProcessedSize() int64 {
	if x != nil {
		return x.ProcessedSize
	}
	return 0
}

func (x *SystemTask) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *SystemTask) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SystemTask) GetCreateAddr() string {
	if x != nil {
		return x.CreateAddr
	}
	return ""
}

func (x *SystemTask) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SystemTask) GetTextLink() string {
	if x != nil {
		return x.TextLink
	}
	return ""
}

func (x *SystemTask) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *SystemTask) GetErrorTime() int64 {
	if x != nil {
		return x.ErrorTime
	}
	return 0
}

func (x *SystemTask) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SystemTask) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *SystemTask) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SystemTask) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SystemTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string      `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Task     *SystemTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Data     []*TaskFile `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SystemTaskDetail) Reset() {
	*x = SystemTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offline_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTaskDetail) ProtoMessage() {}

func (x *SystemTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_offline_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTaskDetail.ProtoReflect.Descriptor instead.
func (*SystemTaskDetail) Descriptor() ([]byte, []int) {
	return file_offline_system_proto_rawDescGZIP(), []int{4}
}

func (x *SystemTaskDetail) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SystemTaskDetail) GetTask() *SystemTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *SystemTaskDetail) GetData() []*TaskFile {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_offline_system_proto protoreflect.FileDescriptor

var file_offline_system_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a,
	0x16, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x22, 0x3a, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xe4, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb4, 0x04, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x80,
	0x01, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0xe4, 0x04, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x1a,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x42, 0x55, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x7a, 0x7a, 0x68, 0x72, 0x31, 0x39, 0x39, 0x30,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x74, 0x61, 0x73, 0x6b, 0xaa, 0x02, 0x11, 0x47, 0x72,
	0x70, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offline_system_proto_rawDescOnce sync.Once
	file_offline_system_proto_rawDescData = file_offline_system_proto_rawDesc
)

func file_offline_system_proto_rawDescGZIP() []byte {
	file_offline_system_proto_rawDescOnce.Do(func() {
		file_offline_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_offline_system_proto_rawDescData)
	})
	return file_offline_system_proto_rawDescData
}

var file_offline_system_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_offline_system_proto_goTypes = []interface{}{
	(*SystemTaskFetchRequest)(nil),  // 0: services.SystemTaskFetchRequest
	(*SystemTaskList)(nil),          // 1: services.SystemTaskList
	(*TaskFile)(nil),                // 2: services.TaskFile
	(*SystemTask)(nil),              // 3: services.SystemTask
	(*SystemTaskDetail)(nil),        // 4: services.SystemTaskDetail
	(*common.StringListEntity)(nil), // 5: services.StringListEntity
}
var file_offline_system_proto_depIdxs = []int32{
	3,  // 0: services.SystemTaskList.data:type_name -> services.SystemTask
	3,  // 1: services.SystemTaskDetail.task:type_name -> services.SystemTask
	2,  // 2: services.SystemTaskDetail.data:type_name -> services.TaskFile
	3,  // 3: services.SystemTaskService.create:input_type -> services.SystemTask
	3,  // 4: services.SystemTaskService.update:input_type -> services.SystemTask
	3,  // 5: services.SystemTaskService.get:input_type -> services.SystemTask
	5,  // 6: services.SystemTaskService.getList:input_type -> services.StringListEntity
	3,  // 7: services.SystemTaskService.getDetail:input_type -> services.SystemTask
	0,  // 8: services.SystemTaskService.fetch:input_type -> services.SystemTaskFetchRequest
	2,  // 9: services.SystemTaskService.uploadFile:input_type -> services.TaskFile
	2,  // 10: services.SystemTaskService.updateFile:input_type -> services.TaskFile
	3,  // 11: services.SystemTaskService.complete:input_type -> services.SystemTask
	3,  // 12: services.SystemTaskService.error:input_type -> services.SystemTask
	3,  // 13: services.SystemTaskService.create:output_type -> services.SystemTask
	3,  // 14: services.SystemTaskService.update:output_type -> services.SystemTask
	3,  // 15: services.SystemTaskService.get:output_type -> services.SystemTask
	1,  // 16: services.SystemTaskService.getList:output_type -> services.SystemTaskList
	4,  // 17: services.SystemTaskService.getDetail:output_type -> services.SystemTaskDetail
	1,  // 18: services.SystemTaskService.fetch:output_type -> services.SystemTaskList
	2,  // 19: services.SystemTaskService.uploadFile:output_type -> services.TaskFile
	2,  // 20: services.SystemTaskService.updateFile:output_type -> services.TaskFile
	3,  // 21: services.SystemTaskService.complete:output_type -> services.SystemTask
	3,  // 22: services.SystemTaskService.error:output_type -> services.SystemTask
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_offline_system_proto_init() }
func file_offline_system_proto_init() {
	if File_offline_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offline_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTaskFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offline_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offline_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_offline_system_proto_goTypes,
		DependencyIndexes: file_offline_system_proto_depIdxs,
		MessageInfos:      file_offline_system_proto_msgTypes,
	}.Build()
	File_offline_system_proto = out.File
	file_offline_system_proto_rawDesc = nil
	file_offline_system_proto_goTypes = nil
	file_offline_system_proto_depIdxs = nil
}
