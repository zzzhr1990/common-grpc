// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package filetask

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTaskServiceClient is the client API for FileTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTaskServiceClient interface {
	Create(ctx context.Context, in *FileTask, opts ...grpc.CallOption) (*FileTask, error)
	List(ctx context.Context, in *FileTask, opts ...grpc.CallOption) (*FileTaskListResponse, error)
}

type fileTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTaskServiceClient(cc grpc.ClientConnInterface) FileTaskServiceClient {
	return &fileTaskServiceClient{cc}
}

func (c *fileTaskServiceClient) Create(ctx context.Context, in *FileTask, opts ...grpc.CallOption) (*FileTask, error) {
	out := new(FileTask)
	err := c.cc.Invoke(ctx, "/services.FileTaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTaskServiceClient) List(ctx context.Context, in *FileTask, opts ...grpc.CallOption) (*FileTaskListResponse, error) {
	out := new(FileTaskListResponse)
	err := c.cc.Invoke(ctx, "/services.FileTaskService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTaskServiceServer is the server API for FileTaskService service.
// All implementations must embed UnimplementedFileTaskServiceServer
// for forward compatibility
type FileTaskServiceServer interface {
	Create(context.Context, *FileTask) (*FileTask, error)
	List(context.Context, *FileTask) (*FileTaskListResponse, error)
	mustEmbedUnimplementedFileTaskServiceServer()
}

// UnimplementedFileTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTaskServiceServer struct {
}

func (UnimplementedFileTaskServiceServer) Create(context.Context, *FileTask) (*FileTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileTaskServiceServer) List(context.Context, *FileTask) (*FileTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileTaskServiceServer) mustEmbedUnimplementedFileTaskServiceServer() {}

// UnsafeFileTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTaskServiceServer will
// result in compilation errors.
type UnsafeFileTaskServiceServer interface {
	mustEmbedUnimplementedFileTaskServiceServer()
}

func RegisterFileTaskServiceServer(s grpc.ServiceRegistrar, srv FileTaskServiceServer) {
	s.RegisterService(&FileTaskService_ServiceDesc, srv)
}

func _FileTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileTaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTaskServiceServer).Create(ctx, req.(*FileTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTaskService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTaskServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileTaskService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTaskServiceServer).List(ctx, req.(*FileTask))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTaskService_ServiceDesc is the grpc.ServiceDesc for FileTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.FileTaskService",
	HandlerType: (*FileTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FileTaskService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FileTaskService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/filetask.proto",
}
