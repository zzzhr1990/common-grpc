// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	Create(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	Get(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	Update(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	UpdateStatistics(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	// rpc CreateInternal (FileInfo) returns (FileInfo) {}
	List(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*FileInfoListResponse, error)
	ListInternal(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*FileInfoListResponse, error)
	BatchCreateSync(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	Trash(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	Delete(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	Copy(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	Move(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	Rename(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	FlushStore(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	//
	Recover(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	DeleteTrash(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	ListTrash(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*TrashInfoListResponse, error)
	GetTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*TrashInfo, error)
	ClearTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	// Label
	CreateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	GetLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	EditLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	DeleteLabel(ctx context.Context, in *BatchLabelRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	ListLabel(ctx context.Context, in *LabelListRequest, opts ...grpc.CallOption) (*LabelListResponse, error)
	AddLabelToFiles(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	RemoveLabelFromFiles(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error)
	// Upload
	UploadToken(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*UploadTokenInfo, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Create(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Get(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Update(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UpdateStatistics(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/UpdateStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) List(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*FileInfoListResponse, error) {
	out := new(FileInfoListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListInternal(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*FileInfoListResponse, error) {
	out := new(FileInfoListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/ListInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) BatchCreateSync(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/BatchCreateSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Trash(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Trash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Delete(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Copy(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Move(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Rename(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FlushStore(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/FlushStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Recover(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteTrash(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/DeleteTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListTrash(ctx context.Context, in *FileInfoListRequest, opts ...grpc.CallOption) (*TrashInfoListResponse, error) {
	out := new(TrashInfoListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/ListTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*TrashInfo, error) {
	out := new(TrashInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/GetTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ClearTrash(ctx context.Context, in *TrashInfo, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/ClearTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/services.FileService/CreateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/services.FileService/GetLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) EditLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/services.FileService/EditLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteLabel(ctx context.Context, in *BatchLabelRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListLabel(ctx context.Context, in *LabelListRequest, opts ...grpc.CallOption) (*LabelListResponse, error) {
	out := new(LabelListResponse)
	err := c.cc.Invoke(ctx, "/services.FileService/ListLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AddLabelToFiles(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/AddLabelToFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveLabelFromFiles(ctx context.Context, in *BatchFileTaskRequest, opts ...grpc.CallOption) (*BatchFileTaskResult, error) {
	out := new(BatchFileTaskResult)
	err := c.cc.Invoke(ctx, "/services.FileService/RemoveLabelFromFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadToken(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*UploadTokenInfo, error) {
	out := new(UploadTokenInfo)
	err := c.cc.Invoke(ctx, "/services.FileService/UploadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	Create(context.Context, *FileInfo) (*FileInfo, error)
	Get(context.Context, *FileInfo) (*FileInfo, error)
	Update(context.Context, *FileInfo) (*FileInfo, error)
	UpdateStatistics(context.Context, *FileInfo) (*FileInfo, error)
	// rpc CreateInternal (FileInfo) returns (FileInfo) {}
	List(context.Context, *FileInfoListRequest) (*FileInfoListResponse, error)
	ListInternal(context.Context, *FileInfoListRequest) (*FileInfoListResponse, error)
	BatchCreateSync(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	Trash(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	Delete(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	Copy(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	Move(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	Rename(context.Context, *FileInfo) (*BatchFileTaskResult, error)
	FlushStore(context.Context, *FileInfo) (*FileInfo, error)
	//
	Recover(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	DeleteTrash(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	ListTrash(context.Context, *FileInfoListRequest) (*TrashInfoListResponse, error)
	GetTrash(context.Context, *TrashInfo) (*TrashInfo, error)
	ClearTrash(context.Context, *TrashInfo) (*BatchFileTaskResult, error)
	// Label
	CreateLabel(context.Context, *Label) (*Label, error)
	GetLabel(context.Context, *Label) (*Label, error)
	EditLabel(context.Context, *Label) (*Label, error)
	DeleteLabel(context.Context, *BatchLabelRequest) (*BatchFileTaskResult, error)
	ListLabel(context.Context, *LabelListRequest) (*LabelListResponse, error)
	AddLabelToFiles(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	RemoveLabelFromFiles(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error)
	// Upload
	UploadToken(context.Context, *FileInfo) (*UploadTokenInfo, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Create(context.Context, *FileInfo) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFileServiceServer) Get(context.Context, *FileInfo) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFileServiceServer) Update(context.Context, *FileInfo) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFileServiceServer) UpdateStatistics(context.Context, *FileInfo) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatistics not implemented")
}
func (UnimplementedFileServiceServer) List(context.Context, *FileInfoListRequest) (*FileInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileServiceServer) ListInternal(context.Context, *FileInfoListRequest) (*FileInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternal not implemented")
}
func (UnimplementedFileServiceServer) BatchCreateSync(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateSync not implemented")
}
func (UnimplementedFileServiceServer) Trash(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trash not implemented")
}
func (UnimplementedFileServiceServer) Delete(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileServiceServer) Copy(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFileServiceServer) Move(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFileServiceServer) Rename(context.Context, *FileInfo) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileServiceServer) FlushStore(context.Context, *FileInfo) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushStore not implemented")
}
func (UnimplementedFileServiceServer) Recover(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedFileServiceServer) DeleteTrash(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrash not implemented")
}
func (UnimplementedFileServiceServer) ListTrash(context.Context, *FileInfoListRequest) (*TrashInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrash not implemented")
}
func (UnimplementedFileServiceServer) GetTrash(context.Context, *TrashInfo) (*TrashInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrash not implemented")
}
func (UnimplementedFileServiceServer) ClearTrash(context.Context, *TrashInfo) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTrash not implemented")
}
func (UnimplementedFileServiceServer) CreateLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedFileServiceServer) GetLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (UnimplementedFileServiceServer) EditLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditLabel not implemented")
}
func (UnimplementedFileServiceServer) DeleteLabel(context.Context, *BatchLabelRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedFileServiceServer) ListLabel(context.Context, *LabelListRequest) (*LabelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabel not implemented")
}
func (UnimplementedFileServiceServer) AddLabelToFiles(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabelToFiles not implemented")
}
func (UnimplementedFileServiceServer) RemoveLabelFromFiles(context.Context, *BatchFileTaskRequest) (*BatchFileTaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelFromFiles not implemented")
}
func (UnimplementedFileServiceServer) UploadToken(context.Context, *FileInfo) (*UploadTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadToken not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Create(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Get(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Update(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UpdateStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UpdateStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/UpdateStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UpdateStatistics(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).List(ctx, req.(*FileInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ListInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListInternal(ctx, req.(*FileInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_BatchCreateSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).BatchCreateSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/BatchCreateSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).BatchCreateSync(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Trash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Trash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Trash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Trash(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Delete(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Copy(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Move(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Rename(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FlushStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FlushStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/FlushStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FlushStore(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Recover(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/DeleteTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteTrash(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ListTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListTrash(ctx, req.(*FileInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/GetTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetTrash(ctx, req.(*TrashInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ClearTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ClearTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ClearTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ClearTrash(ctx, req.(*TrashInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/CreateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/GetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_EditLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).EditLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/EditLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).EditLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteLabel(ctx, req.(*BatchLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/ListLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListLabel(ctx, req.(*LabelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AddLabelToFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AddLabelToFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/AddLabelToFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AddLabelToFiles(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveLabelFromFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFileTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveLabelFromFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/RemoveLabelFromFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveLabelFromFiles(ctx, req.(*BatchFileTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileService/UploadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadToken(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FileService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FileService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FileService_Update_Handler,
		},
		{
			MethodName: "UpdateStatistics",
			Handler:    _FileService_UpdateStatistics_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FileService_List_Handler,
		},
		{
			MethodName: "ListInternal",
			Handler:    _FileService_ListInternal_Handler,
		},
		{
			MethodName: "BatchCreateSync",
			Handler:    _FileService_BatchCreateSync_Handler,
		},
		{
			MethodName: "Trash",
			Handler:    _FileService_Trash_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileService_Delete_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FileService_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FileService_Move_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileService_Rename_Handler,
		},
		{
			MethodName: "FlushStore",
			Handler:    _FileService_FlushStore_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _FileService_Recover_Handler,
		},
		{
			MethodName: "DeleteTrash",
			Handler:    _FileService_DeleteTrash_Handler,
		},
		{
			MethodName: "ListTrash",
			Handler:    _FileService_ListTrash_Handler,
		},
		{
			MethodName: "GetTrash",
			Handler:    _FileService_GetTrash_Handler,
		},
		{
			MethodName: "ClearTrash",
			Handler:    _FileService_ClearTrash_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _FileService_CreateLabel_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _FileService_GetLabel_Handler,
		},
		{
			MethodName: "EditLabel",
			Handler:    _FileService_EditLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _FileService_DeleteLabel_Handler,
		},
		{
			MethodName: "ListLabel",
			Handler:    _FileService_ListLabel_Handler,
		},
		{
			MethodName: "AddLabelToFiles",
			Handler:    _FileService_AddLabelToFiles_Handler,
		},
		{
			MethodName: "RemoveLabelFromFiles",
			Handler:    _FileService_RemoveLabelFromFiles_Handler,
		},
		{
			MethodName: "UploadToken",
			Handler:    _FileService_UploadToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/filesystem.proto",
}

// FileNoticeServiceClient is the client API for FileNoticeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileNoticeServiceClient interface {
	OnProgress(ctx context.Context, in *TaskProgress, opts ...grpc.CallOption) (*TaskProgress, error)
	OnComplete(ctx context.Context, in *TaskCompleteEvent, opts ...grpc.CallOption) (*TaskCompleteEvent, error)
	OnError(ctx context.Context, in *TaskStatusUpdateEvent, opts ...grpc.CallOption) (*TaskStatusUpdateEvent, error)
	OnCancel(ctx context.Context, in *TaskStatusUpdateEvent, opts ...grpc.CallOption) (*TaskStatusUpdateEvent, error)
}

type fileNoticeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileNoticeServiceClient(cc grpc.ClientConnInterface) FileNoticeServiceClient {
	return &fileNoticeServiceClient{cc}
}

func (c *fileNoticeServiceClient) OnProgress(ctx context.Context, in *TaskProgress, opts ...grpc.CallOption) (*TaskProgress, error) {
	out := new(TaskProgress)
	err := c.cc.Invoke(ctx, "/services.FileNoticeService/OnProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileNoticeServiceClient) OnComplete(ctx context.Context, in *TaskCompleteEvent, opts ...grpc.CallOption) (*TaskCompleteEvent, error) {
	out := new(TaskCompleteEvent)
	err := c.cc.Invoke(ctx, "/services.FileNoticeService/OnComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileNoticeServiceClient) OnError(ctx context.Context, in *TaskStatusUpdateEvent, opts ...grpc.CallOption) (*TaskStatusUpdateEvent, error) {
	out := new(TaskStatusUpdateEvent)
	err := c.cc.Invoke(ctx, "/services.FileNoticeService/OnError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileNoticeServiceClient) OnCancel(ctx context.Context, in *TaskStatusUpdateEvent, opts ...grpc.CallOption) (*TaskStatusUpdateEvent, error) {
	out := new(TaskStatusUpdateEvent)
	err := c.cc.Invoke(ctx, "/services.FileNoticeService/OnCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileNoticeServiceServer is the server API for FileNoticeService service.
// All implementations must embed UnimplementedFileNoticeServiceServer
// for forward compatibility
type FileNoticeServiceServer interface {
	OnProgress(context.Context, *TaskProgress) (*TaskProgress, error)
	OnComplete(context.Context, *TaskCompleteEvent) (*TaskCompleteEvent, error)
	OnError(context.Context, *TaskStatusUpdateEvent) (*TaskStatusUpdateEvent, error)
	OnCancel(context.Context, *TaskStatusUpdateEvent) (*TaskStatusUpdateEvent, error)
	mustEmbedUnimplementedFileNoticeServiceServer()
}

// UnimplementedFileNoticeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileNoticeServiceServer struct {
}

func (UnimplementedFileNoticeServiceServer) OnProgress(context.Context, *TaskProgress) (*TaskProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnProgress not implemented")
}
func (UnimplementedFileNoticeServiceServer) OnComplete(context.Context, *TaskCompleteEvent) (*TaskCompleteEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnComplete not implemented")
}
func (UnimplementedFileNoticeServiceServer) OnError(context.Context, *TaskStatusUpdateEvent) (*TaskStatusUpdateEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnError not implemented")
}
func (UnimplementedFileNoticeServiceServer) OnCancel(context.Context, *TaskStatusUpdateEvent) (*TaskStatusUpdateEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCancel not implemented")
}
func (UnimplementedFileNoticeServiceServer) mustEmbedUnimplementedFileNoticeServiceServer() {}

// UnsafeFileNoticeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileNoticeServiceServer will
// result in compilation errors.
type UnsafeFileNoticeServiceServer interface {
	mustEmbedUnimplementedFileNoticeServiceServer()
}

func RegisterFileNoticeServiceServer(s grpc.ServiceRegistrar, srv FileNoticeServiceServer) {
	s.RegisterService(&FileNoticeService_ServiceDesc, srv)
}

func _FileNoticeService_OnProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileNoticeServiceServer).OnProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileNoticeService/OnProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileNoticeServiceServer).OnProgress(ctx, req.(*TaskProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileNoticeService_OnComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileNoticeServiceServer).OnComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileNoticeService/OnComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileNoticeServiceServer).OnComplete(ctx, req.(*TaskCompleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileNoticeService_OnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileNoticeServiceServer).OnError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileNoticeService/OnError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileNoticeServiceServer).OnError(ctx, req.(*TaskStatusUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileNoticeService_OnCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileNoticeServiceServer).OnCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FileNoticeService/OnCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileNoticeServiceServer).OnCancel(ctx, req.(*TaskStatusUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// FileNoticeService_ServiceDesc is the grpc.ServiceDesc for FileNoticeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileNoticeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.FileNoticeService",
	HandlerType: (*FileNoticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnProgress",
			Handler:    _FileNoticeService_OnProgress_Handler,
		},
		{
			MethodName: "OnComplete",
			Handler:    _FileNoticeService_OnComplete_Handler,
		},
		{
			MethodName: "OnError",
			Handler:    _FileNoticeService_OnError_Handler,
		},
		{
			MethodName: "OnCancel",
			Handler:    _FileNoticeService_OnCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/filesystem.proto",
}
